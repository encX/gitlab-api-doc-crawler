openapi: 3.0.2
info:
  title: 'GitLabKit: REST API / repository_files'
  version: '1.0'
paths:
  '/projects/{id}/repository/files/{file_path}':
    get:
      summary: Get file from repository
      description: >-
        Allows you to receive information about file in repository like name, size, content. File content is Base64
        encoded. This endpoint can be accessed without authentication if the repository is publicly accessible.
      operationId: getFileFromRepository
      parameters:
        - name: id
          in: path
          description: The ID or URL-encoded path of the project owned by the authenticated user
          required: true
          schema:
            type: string
        - name: file_path
          in: path
          description: URL encoded full path to new file. Ex. lib%2Fclass%2Erb.
          required: true
          schema:
            type: string
        - name: ref
          in: query
          description: 'The name of branch, tag or commit'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getFileFromRepositoryResponse'
    post:
      summary: Create new file in repository
      description: This allows you to create a single file. For creating multiple files with a single request see the commits API.
      operationId: createNewFileInRepository
      parameters:
        - name: id
          in: path
          description: The ID or URL-encoded path of the project owned by the authenticated user.
          required: true
          schema:
            type: string
        - name: file_path
          in: path
          description: 'URL-encoded full path to new file. For example: lib%2Fclass%2Erb.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createNewFileInRepositoryResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createNewFileInRepositoryRequest'
    put:
      summary: Update existing file in repository
      description: This allows you to update a single file. For updating multiple files with a single request see the commits API.
      operationId: updateExistingFileInRepository
      parameters:
        - name: id
          in: path
          description: The ID or URL-encoded path of the project owned by the authenticated user
          required: true
          schema:
            type: string
        - name: file_path
          in: path
          description: 'URL-encoded full path to new file. For example: lib%2Fclass%2Erb.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateExistingFileInRepositoryResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateExistingFileInRepositoryRequest'
    delete:
      summary: Delete existing file in repository
      description: 'This allows you to delete a single file. For deleting multiple files with a single request, see the commits API.'
      operationId: deleteExistingFileInRepository
      parameters:
        - name: id
          in: path
          description: The ID or URL-encoded path of the project owned by the authenticated user.
          required: true
          schema:
            type: string
        - name: file_path
          in: path
          description: 'URL-encoded full path to new file. For example: lib%2Fclass%2Erb.'
          required: true
          schema:
            type: string
        - name: branch
          in: query
          description: Name of the new branch to create. The commit is added to this branch.
          required: true
          schema:
            type: string
        - name: start_branch
          in: query
          description: Name of the base branch to create the new branch from.
          required: false
          schema:
            type: string
        - name: author_email
          in: query
          description: The commit author’s email address.
          required: false
          schema:
            type: string
        - name: author_name
          in: query
          description: The commit author’s name.
          required: false
          schema:
            type: string
        - name: commit_message
          in: query
          description: The commit message.
          required: true
          schema:
            type: string
        - name: last_commit_id
          in: query
          description: Last known file commit ID.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteExistingFileInRepositoryResponse'
  '/projects/{id}/repository/files/{file_path}/blame':
    get:
      summary: Get file blame from repository
      description: Allows you to receive blame information. Each blame range contains lines and corresponding commit information.
      operationId: getFileBlameFromRepository
      parameters:
        - name: id
          in: path
          description: The ID or URL-encoded path of the project owned by the authenticated user
          required: true
          schema:
            type: string
        - name: file_path
          in: path
          description: URL encoded full path to new file. Ex. lib%2Fclass%2Erb.
          required: true
          schema:
            type: string
        - name: ref
          in: query
          description: 'The name of branch, tag or commit'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getFileBlameFromRepositoryResponse'
  '/projects/{id}/repository/files/{file_path}/raw':
    get:
      summary: Get raw file from repository
      description: ''
      operationId: getRawFileFromRepository
      parameters:
        - name: id
          in: path
          description: The ID or URL-encoded path of the project owned by the authenticated user
          required: true
          schema:
            type: string
        - name: file_path
          in: path
          description: URL encoded full path to new file. Ex. lib%2Fclass%2Erb.
          required: true
          schema:
            type: string
        - name: ref
          in: query
          description: 'The name of branch, tag or commit. Default is the HEAD of the project.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getRawFileFromRepositoryResponse'
components:
  schemas:
    getFileFromRepositoryResponse:
      type: object
      properties:
        file_name:
          type: string
        file_path:
          type: string
        size:
          type: integer
        encoding:
          type: string
        content:
          type: string
        content_sha256:
          type: string
        ref:
          type: string
        blob_id:
          type: string
        commit_id:
          type: string
        last_commit_id:
          type: string
    getFileBlameFromRepositoryResponse:
      type: array
      items:
        type: object
        properties:
          commit:
            type: object
            properties:
              id:
                type: string
              message:
                type: string
              parent_ids:
                type: array
                items:
                  type: string
              authored_date:
                type: string
              author_name:
                type: string
              author_email:
                type: string
              committed_date:
                type: string
              committer_name:
                type: string
              committer_email:
                type: string
          lines:
            type: array
            items:
              type: string
    getRawFileFromRepositoryResponse:
      type: string
    createNewFileInRepositoryRequest:
      type: object
      properties:
        branch:
          type: string
        start_branch:
          type: string
        encoding:
          type: string
        author_email:
          type: string
        author_name:
          type: string
        content:
          type: string
        commit_message:
          type: string
      required:
        - branch
        - content
        - commit_message
    createNewFileInRepositoryResponse:
      type: object
      properties:
        file_path:
          type: string
        branch:
          type: string
    updateExistingFileInRepositoryRequest:
      type: object
      properties:
        branch:
          type: string
        start_branch:
          type: string
        encoding:
          type: string
        author_email:
          type: string
        author_name:
          type: string
        content:
          type: string
        commit_message:
          type: string
        last_commit_id:
          type: string
      required:
        - branch
        - content
        - commit_message
    updateExistingFileInRepositoryResponse:
      type: object
      properties:
        file_path:
          type: string
        branch:
          type: string
    deleteExistingFileInRepositoryResponse:
      type: string
