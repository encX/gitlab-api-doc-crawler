openapi: 3.0.2
info:
  title: 'GitLabKit: REST API / managed_licenses'
  version: '1.0'
paths:
  '/projects/{id}/managed_licenses':
    get:
      summary: List managed licenses
      description: Get all managed licenses for a given project.
      operationId: listManagedLicenses
      parameters:
        - name: id
          in: path
          description: The ID or URL-encoded path of the project
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listManagedLicensesResponse'
      tags:
        - managed_licenses
    post:
      summary: Create a new managed license
      description: Creates a new managed license for the given project with the given name and approval status.
      operationId: createANewManagedLicense
      parameters:
        - name: id
          in: path
          description: The ID or URL-encoded path of the project owned by the authenticated user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/showAnExistingManagedLicenseResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createANewManagedLicenseRequest'
      tags:
        - managed_licenses
  '/projects/{id}/managed_licenses/{managed_license_id}':
    get:
      summary: Show an existing managed license
      description: Shows an existing managed license.
      operationId: showAnExistingManagedLicense
      parameters:
        - name: id
          in: path
          description: The ID or URL-encoded path of the project owned by the authenticated user
          required: true
          schema:
            type: string
        - name: managed_license_id
          in: path
          description: The ID or URL-encoded name of the license belonging to the project
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/showAnExistingManagedLicenseResponse'
      tags:
        - managed_licenses
    delete:
      summary: Delete a managed license
      description: Deletes a managed license with a given ID.
      operationId: deleteAManagedLicense
      parameters:
        - name: id
          in: path
          description: The ID or URL-encoded path of the project owned by the authenticated user
          required: true
          schema:
            type: string
        - name: managed_license_id
          in: path
          description: The ID or URL-encoded name of the license belonging to the project
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
      tags:
        - managed_licenses
    patch:
      summary: Edit an existing managed license
      description: Updates an existing managed license with a new approval status.
      operationId: editAnExistingManagedLicense
      parameters:
        - name: id
          in: path
          description: The ID or URL-encoded path of the project owned by the authenticated user
          required: true
          schema:
            type: string
        - name: managed_license_id
          in: path
          description: The ID or URL-encoded name of the license belonging to the project
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/showAnExistingManagedLicenseResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/editAnExistingManagedLicenseRequest'
      tags:
        - managed_licenses
components:
  schemas:
    listManagedLicensesResponse:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          approval_status:
            type: string
    showAnExistingManagedLicenseResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        approval_status:
          type: string
    createANewManagedLicenseRequest:
      type: object
      properties:
        name:
          type: string
        approval_status:
          type: string
      required:
        - name
        - approval_status
    editAnExistingManagedLicenseRequest:
      type: object
      properties:
        approval_status:
          type: string
      required:
        - approval_status
