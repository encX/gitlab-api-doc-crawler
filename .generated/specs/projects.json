{
  "origin": "https://docs.gitlab.com/ee/api/projects.html",
  "pageName": "Projects",
  "apis": [
    {
      "name": "Projects API",
      "description": "Interact with projects using the REST API.",
      "resources": [],
      "attributes": [],
      "response": {}
    },
    {
      "name": "Project visibility level",
      "description": "For more, read Project visibility.",
      "resources": [],
      "attributes": [],
      "response": {}
    },
    {
      "name": "Project merge method",
      "description": "There are three options for merge_method to choose from:",
      "resources": [],
      "attributes": [],
      "response": {}
    },
    {
      "name": "List all projects",
      "description": "You can filter by custom attributes with:",
      "resources": [
        {
          "method": "GET",
          "path": "/projects?custom_attributes[key]=value&custom_attributes[other_key]=other_value"
        }
      ],
      "attributes": [
        {
          "name": "archived",
          "type": "boolean",
          "required": false,
          "description": "Limit by archived status."
        },
        {
          "name": "id_after",
          "type": "integer",
          "required": false,
          "description": "Limit results to projects with IDs greater than the specified ID."
        },
        {
          "name": "id_before",
          "type": "integer",
          "required": false,
          "description": "Limit results to projects with IDs less than the specified ID."
        },
        {
          "name": "imported",
          "type": "boolean",
          "required": false,
          "description": "Limit results to projects which were imported from external systems by current user."
        },
        {
          "name": "last_activity_after",
          "type": "datetime",
          "required": false,
          "description": "Limit results to projects with last_activity after specified time. Format: ISO 8601 (YYYY-MM-DDTHH:MM:SSZ)"
        },
        {
          "name": "last_activity_before",
          "type": "datetime",
          "required": false,
          "description": "Limit results to projects with last_activity before specified time. Format: ISO 8601 (YYYY-MM-DDTHH:MM:SSZ)"
        },
        {
          "name": "membership",
          "type": "boolean",
          "required": false,
          "description": "Limit by projects that the current user is a member of."
        },
        {
          "name": "min_access_level",
          "type": "integer",
          "required": false,
          "description": "Limit by current user minimal access level."
        },
        {
          "name": "order_by",
          "type": "string",
          "required": false,
          "description": "Return projects ordered by id, name, path, created_at, updated_at, last_activity_at, or similarity fields. repository_size, storage_size, packages_size or wiki_size fields are only allowed for administrators. similarity (introduced in GitLab 14.1) is only available when searching and is limited to projects that the current user is a member of. Default is created_at."
        },
        {
          "name": "owned",
          "type": "boolean",
          "required": false,
          "description": "Limit by projects explicitly owned by the current user."
        },
        {
          "name": "repository_checksum_failed",
          "type": "boolean",
          "required": false,
          "description": "Limit projects where the repository checksum calculation has failed."
        },
        {
          "name": "repository_storage",
          "type": "string",
          "required": false,
          "description": "Limit results to projects stored on repository_storage. (administrators only)"
        },
        {
          "name": "search_namespaces",
          "type": "boolean",
          "required": false,
          "description": "Include ancestor namespaces when matching search criteria. Default is false."
        },
        {
          "name": "search",
          "type": "string",
          "required": false,
          "description": "Return list of projects matching the search criteria."
        },
        {
          "name": "simple",
          "type": "boolean",
          "required": false,
          "description": "Return only limited fields for each project. This is a no-op without authentication as then only simple fields are returned."
        },
        {
          "name": "sort",
          "type": "string",
          "required": false,
          "description": "Return projects sorted in asc or desc order. Default is desc."
        },
        {
          "name": "starred",
          "type": "boolean",
          "required": false,
          "description": "Limit by projects starred by the current user."
        },
        {
          "name": "statistics",
          "type": "boolean",
          "required": false,
          "description": "Include project statistics. Only available to Reporter or higher level role members."
        },
        {
          "name": "topic",
          "type": "string",
          "required": false,
          "description": "Comma-separated topic names. Limit results to projects that match all of given topics. See topics attribute."
        },
        {
          "name": "visibility",
          "type": "string",
          "required": false,
          "description": "Limit by visibility public, internal, or private."
        },
        {
          "name": "wiki_checksum_failed",
          "type": "boolean",
          "required": false,
          "description": "Limit projects where the wiki checksum calculation has failed."
        },
        {
          "name": "with_custom_attributes",
          "type": "boolean",
          "required": false,
          "description": "Include custom attributes in response. (administrator only)"
        },
        {
          "name": "with_issues_enabled",
          "type": "boolean",
          "required": false,
          "description": "Limit by enabled issues feature."
        },
        {
          "name": "with_merge_requests_enabled",
          "type": "boolean",
          "required": false,
          "description": "Limit by enabled merge requests feature."
        },
        {
          "name": "with_programming_language",
          "type": "string",
          "required": false,
          "description": "Limit by projects which use the given programming language."
        }
      ],
      "response": "[  {    \"id\": 4,    \"description\": null,    \"approvals_before_merge\": 0,    ...  }]"
    },
    {
      "name": "Pagination limits",
      "description": "Keyset pagination supports only order_by=id. Other sorting options arenâ€™t available.",
      "resources": [],
      "attributes": [],
      "response": {}
    },
    {
      "name": "List user projects",
      "description": "This endpoint supports keyset pagination for selected order_by options.",
      "resources": [
        {
          "method": "GET",
          "path": "/users/:user_id/projects"
        }
      ],
      "attributes": [
        {
          "name": "user_id",
          "type": "string",
          "required": false,
          "description": "The ID or username of the user."
        },
        {
          "name": "archived",
          "type": "boolean",
          "required": false,
          "description": "Limit by archived status."
        },
        {
          "name": "id_after",
          "type": "integer",
          "required": false,
          "description": "Limit results to projects with IDs greater than the specified ID."
        },
        {
          "name": "id_before",
          "type": "integer",
          "required": false,
          "description": "Limit results to projects with IDs less than the specified ID."
        },
        {
          "name": "membership",
          "type": "boolean",
          "required": false,
          "description": "Limit by projects that the current user is a member of."
        },
        {
          "name": "min_access_level",
          "type": "integer",
          "required": false,
          "description": "Limit by current user minimal access level."
        },
        {
          "name": "order_by",
          "type": "string",
          "required": false,
          "description": "Return projects ordered by id, name, path, created_at, updated_at, or last_activity_at fields. Default is created_at."
        },
        {
          "name": "owned",
          "type": "boolean",
          "required": false,
          "description": "Limit by projects explicitly owned by the current user."
        },
        {
          "name": "search",
          "type": "string",
          "required": false,
          "description": "Return list of projects matching the search criteria."
        },
        {
          "name": "simple",
          "type": "boolean",
          "required": false,
          "description": "Return only limited fields for each project. This is a no-op without authentication as then only simple fields are returned."
        },
        {
          "name": "sort",
          "type": "string",
          "required": false,
          "description": "Return projects sorted in asc or desc order. Default is desc."
        },
        {
          "name": "starred",
          "type": "boolean",
          "required": false,
          "description": "Limit by projects starred by the current user."
        },
        {
          "name": "statistics",
          "type": "boolean",
          "required": false,
          "description": "Include project statistics. Only available to Reporter or higher level role members."
        },
        {
          "name": "visibility",
          "type": "string",
          "required": false,
          "description": "Limit by visibility public, internal, or private."
        },
        {
          "name": "with_custom_attributes",
          "type": "boolean",
          "required": false,
          "description": "Include custom attributes in response. (administrator only)"
        },
        {
          "name": "with_issues_enabled",
          "type": "boolean",
          "required": false,
          "description": "Limit by enabled issues feature."
        },
        {
          "name": "with_merge_requests_enabled",
          "type": "boolean",
          "required": false,
          "description": "Limit by enabled merge requests feature."
        },
        {
          "name": "with_programming_language",
          "type": "string",
          "required": false,
          "description": "Limit by projects which use the given programming language."
        }
      ],
      "response": "[  {    \"id\": 4,    \"description\": null,    \"default_branch\": \"master\",    \"visibility\": \"private\",    \"ssh_url_to_repo\": \"git@example.com:diaspora/diaspora-client.git\",    \"http_url_to_repo\": \"http://example.com/diaspora/diaspora-client.git\",    \"web_url\": \"http://example.com/diaspora/diaspora-client\",    \"readme_url\": \"http://example.com/diaspora/diaspora-client/blob/master/README.md\",    \"tag_list\": [ //deprecated, use `topics` instead      \"example\",      \"disapora client\"    ],    \"topics\": [      \"example\",      \"disapora client\"    ],    \"owner\": {      \"id\": 3,      \"name\": \"Diaspora\",      \"created_at\": \"2013-09-30T13:46:02Z\"    },    \"name\": \"Diaspora Client\",    \"name_with_namespace\": \"Diaspora / Diaspora Client\",    \"path\": \"diaspora-client\",    \"path_with_namespace\": \"diaspora/diaspora-client\",    \"issues_enabled\": true,    \"open_issues_count\": 1,    \"merge_requests_enabled\": true,    \"jobs_enabled\": true,    \"wiki_enabled\": true,    \"snippets_enabled\": false,    \"can_create_merge_request_in\": true,    \"resolve_outdated_diff_discussions\": false,    \"container_registry_enabled\": false, // deprecated, use container_registry_access_level instead    \"container_registry_access_level\": \"disabled\",    \"security_and_compliance_access_level\": \"disabled\",    \"created_at\": \"2013-09-30T13:46:02Z\",    \"last_activity_at\": \"2013-09-30T13:46:02Z\",    \"creator_id\": 3,    \"namespace\": {      \"id\": 3,      \"name\": \"Diaspora\",      \"path\": \"diaspora\",      \"kind\": \"group\",      \"full_path\": \"diaspora\"    },    \"import_status\": \"none\",    \"archived\": false,    \"avatar_url\": \"http://example.com/uploads/project/avatar/4/uploads/avatar.png\",    \"shared_runners_enabled\": true,    \"forks_count\": 0,    \"star_count\": 0,    \"runners_token\": \"b8547b1dc37721d05889db52fa2f02\",    \"ci_default_git_depth\": 50,    \"ci_forward_deployment_enabled\": true,    \"public_jobs\": true,    \"shared_with_groups\": [],    \"only_allow_merge_if_pipeline_succeeds\": false,    \"allow_merge_on_skipped_pipeline\": false,    \"restrict_user_defined_variables\": false,    \"only_allow_merge_if_all_discussions_are_resolved\": false,    \"remove_source_branch_after_merge\": false,    \"request_access_enabled\": false,    \"merge_method\": \"merge\",    \"squash_option\": \"default_on\",    \"autoclose_referenced_issues\": true,    \"suggestion_commit_message\": null,    \"merge_commit_template\": null,    \"squash_commit_template\": null,    \"marked_for_deletion_at\": \"2020-04-03\", // Deprecated and will be removed in API v5 in favor of marked_for_deletion_on    \"marked_for_deletion_on\": \"2020-04-03\",    \"statistics\": {      \"commit_count\": 37,      \"storage_size\": 1038090,      \"repository_size\": 1038090,      \"wiki_size\" : 0,      \"lfs_objects_size\": 0,      \"job_artifacts_size\": 0,      \"pipeline_artifacts_size\": 0,      \"packages_size\": 0,      \"snippets_size\": 0,      \"uploads_size\": 0    },    \"container_registry_image_prefix\": \"registry.example.com/diaspora/diaspora-client\",    \"_links\": {      \"self\": \"http://example.com/api/v4/projects\",      \"issues\": \"http://example.com/api/v4/projects/1/issues\",      \"merge_requests\": \"http://example.com/api/v4/projects/1/merge_requests\",      \"repo_branches\": \"http://example.com/api/v4/projects/1/repository_branches\",      \"labels\": \"http://example.com/api/v4/projects/1/labels\",      \"events\": \"http://example.com/api/v4/projects/1/events\",      \"members\": \"http://example.com/api/v4/projects/1/members\"    }  },  {    \"id\": 6,    \"description\": null,    \"default_branch\": \"master\",    \"visibility\": \"private\",    \"ssh_url_to_repo\": \"git@example.com:brightbox/puppet.git\",    \"http_url_to_repo\": \"http://example.com/brightbox/puppet.git\",    \"web_url\": \"http://example.com/brightbox/puppet\",    \"readme_url\": \"http://example.com/brightbox/puppet/blob/master/README.md\",    \"tag_list\": [ //deprecated, use `topics` instead      \"example\",      \"puppet\"    ],    \"topics\": [      \"example\",      \"puppet\"    ],    \"owner\": {      \"id\": 4,      \"name\": \"Brightbox\",      \"created_at\": \"2013-09-30T13:46:02Z\"    },    \"name\": \"Puppet\",    \"name_with_namespace\": \"Brightbox / Puppet\",    \"path\": \"puppet\",    \"path_with_namespace\": \"brightbox/puppet\",    \"issues_enabled\": true,    \"open_issues_count\": 1,    \"merge_requests_enabled\": true,    \"jobs_enabled\": true,    \"wiki_enabled\": true,    \"snippets_enabled\": false,    \"can_create_merge_request_in\": true,    \"resolve_outdated_diff_discussions\": false,    \"container_registry_enabled\": false, // deprecated, use container_registry_access_level instead    \"container_registry_access_level\": \"disabled\",    \"security_and_compliance_access_level\": \"disabled\",    \"created_at\": \"2013-09-30T13:46:02Z\",    \"last_activity_at\": \"2013-09-30T13:46:02Z\",    \"creator_id\": 3,    \"namespace\": {      \"id\": 4,      \"name\": \"Brightbox\",      \"path\": \"brightbox\",      \"kind\": \"group\",      \"full_path\": \"brightbox\"    },    \"import_status\": \"none\",    \"import_error\": null,    \"permissions\": {      \"project_access\": {        \"access_level\": 10,        \"notification_level\": 3      },      \"group_access\": {        \"access_level\": 50,        \"notification_level\": 3      }    },    \"archived\": false,    \"avatar_url\": null,    \"shared_runners_enabled\": true,    \"forks_count\": 0,    \"star_count\": 0,    \"runners_token\": \"b8547b1dc37721d05889db52fa2f02\",    \"ci_default_git_depth\": 0,    \"ci_forward_deployment_enabled\": true,    \"public_jobs\": true,    \"shared_with_groups\": [],    \"only_allow_merge_if_pipeline_succeeds\": false,    \"allow_merge_on_skipped_pipeline\": false,    \"restrict_user_defined_variables\": false,    \"only_allow_merge_if_all_discussions_are_resolved\": false,    \"remove_source_branch_after_merge\": false,    \"request_access_enabled\": false,    \"merge_method\": \"merge\",    \"squash_option\": \"default_on\",    \"auto_devops_enabled\": true,    \"auto_devops_deploy_strategy\": \"continuous\",    \"repository_storage\": \"default\",    \"approvals_before_merge\": 0,    \"mirror\": false,    \"mirror_user_id\": 45,    \"mirror_trigger_builds\": false,    \"only_mirror_protected_branches\": false,    \"mirror_overwrites_diverged_branches\": false,    \"external_authorization_classification_label\": null,    \"packages_enabled\": true,    \"service_desk_enabled\": false,    \"service_desk_address\": null,    \"autoclose_referenced_issues\": true,    \"suggestion_commit_message\": null,    \"merge_commit_template\": null,    \"squash_commit_template\": null,    \"statistics\": {      \"commit_count\": 12,      \"storage_size\": 2066080,      \"repository_size\": 2066080,      \"wiki_size\" : 0,      \"lfs_objects_size\": 0,      \"job_artifacts_size\": 0,      \"pipeline_artifacts_size\": 0,      \"packages_size\": 0,      \"snippets_size\": 0,      \"uploads_size\": 0    },    \"container_registry_image_prefix\": \"registry.example.com/brightbox/puppet\",    \"_links\": {      \"self\": \"http://example.com/api/v4/projects\",      \"issues\": \"http://example.com/api/v4/projects/1/issues\",      \"merge_requests\": \"http://example.com/api/v4/projects/1/merge_requests\",      \"repo_branches\": \"http://example.com/api/v4/projects/1/repository_branches\",      \"labels\": \"http://example.com/api/v4/projects/1/labels\",      \"events\": \"http://example.com/api/v4/projects/1/events\",      \"members\": \"http://example.com/api/v4/projects/1/members\"    }  }]"
    },
    {
      "name": "List projects starred by a user",
      "description": "Get a list of visible projects starred by the given user. When accessed without authentication, only public projects are returned.",
      "resources": [
        {
          "method": "GET",
          "path": "/users/:user_id/starred_projects"
        }
      ],
      "attributes": [
        {
          "name": "user_id",
          "type": "string",
          "required": false,
          "description": "The ID or username of the user."
        },
        {
          "name": "archived",
          "type": "boolean",
          "required": false,
          "description": "Limit by archived status."
        },
        {
          "name": "membership",
          "type": "boolean",
          "required": false,
          "description": "Limit by projects that the current user is a member of."
        },
        {
          "name": "min_access_level",
          "type": "integer",
          "required": false,
          "description": "Limit by current user minimal access level."
        },
        {
          "name": "order_by",
          "type": "string",
          "required": false,
          "description": "Return projects ordered by id, name, path, created_at, updated_at, or last_activity_at fields. Default is created_at."
        },
        {
          "name": "owned",
          "type": "boolean",
          "required": false,
          "description": "Limit by projects explicitly owned by the current user."
        },
        {
          "name": "search",
          "type": "string",
          "required": false,
          "description": "Return list of projects matching the search criteria."
        },
        {
          "name": "simple",
          "type": "boolean",
          "required": false,
          "description": "Return only limited fields for each project. This is a no-op without authentication as then only simple fields are returned."
        },
        {
          "name": "sort",
          "type": "string",
          "required": false,
          "description": "Return projects sorted in asc or desc order. Default is desc."
        },
        {
          "name": "starred",
          "type": "boolean",
          "required": false,
          "description": "Limit by projects starred by the current user."
        },
        {
          "name": "statistics",
          "type": "boolean",
          "required": false,
          "description": "Include project statistics. Only available to Reporter or higher level role members."
        },
        {
          "name": "visibility",
          "type": "string",
          "required": false,
          "description": "Limit by visibility public, internal, or private."
        },
        {
          "name": "with_custom_attributes",
          "type": "boolean",
          "required": false,
          "description": "Include custom attributes in response. (administrator only)"
        },
        {
          "name": "with_issues_enabled",
          "type": "boolean",
          "required": false,
          "description": "Limit by enabled issues feature."
        },
        {
          "name": "with_merge_requests_enabled",
          "type": "boolean",
          "required": false,
          "description": "Limit by enabled merge requests feature."
        }
      ],
      "response": "[  {    \"id\": 4,    \"description\": null,    \"default_branch\": \"master\",    \"visibility\": \"private\",    \"ssh_url_to_repo\": \"git@example.com:diaspora/diaspora-client.git\",    \"http_url_to_repo\": \"http://example.com/diaspora/diaspora-client.git\",    \"web_url\": \"http://example.com/diaspora/diaspora-client\",    \"readme_url\": \"http://example.com/diaspora/diaspora-client/blob/master/README.md\",    \"tag_list\": [ //deprecated, use `topics` instead      \"example\",      \"disapora client\"    ],    \"topics\": [      \"example\",      \"disapora client\"    ],    \"owner\": {      \"id\": 3,      \"name\": \"Diaspora\",      \"created_at\": \"2013-09-30T13:46:02Z\"    },    \"name\": \"Diaspora Client\",    \"name_with_namespace\": \"Diaspora / Diaspora Client\",    \"path\": \"diaspora-client\",    \"path_with_namespace\": \"diaspora/diaspora-client\",    \"issues_enabled\": true,    \"open_issues_count\": 1,    \"merge_requests_enabled\": true,    \"jobs_enabled\": true,    \"wiki_enabled\": true,    \"snippets_enabled\": false,    \"can_create_merge_request_in\": true,    \"resolve_outdated_diff_discussions\": false,    \"container_registry_enabled\": false, // deprecated, use container_registry_access_level instead    \"container_registry_access_level\": \"disabled\",    \"security_and_compliance_access_level\": \"disabled\",    \"created_at\": \"2013-09-30T13:46:02Z\",    \"last_activity_at\": \"2013-09-30T13:46:02Z\",    \"creator_id\": 3,    \"namespace\": {      \"id\": 3,      \"name\": \"Diaspora\",      \"path\": \"diaspora\",      \"kind\": \"group\",      \"full_path\": \"diaspora\"    },    \"import_status\": \"none\",    \"archived\": false,    \"avatar_url\": \"http://example.com/uploads/project/avatar/4/uploads/avatar.png\",    \"shared_runners_enabled\": true,    \"forks_count\": 0,    \"star_count\": 0,    \"runners_token\": \"b8547b1dc37721d05889db52fa2f02\",    \"public_jobs\": true,    \"shared_with_groups\": [],    \"only_allow_merge_if_pipeline_succeeds\": false,    \"allow_merge_on_skipped_pipeline\": false,    \"restrict_user_defined_variables\": false,    \"only_allow_merge_if_all_discussions_are_resolved\": false,    \"remove_source_branch_after_merge\": false,    \"request_access_enabled\": false,    \"merge_method\": \"merge\",    \"squash_option\": \"default_on\",    \"autoclose_referenced_issues\": true,    \"suggestion_commit_message\": null,    \"merge_commit_template\": null,    \"squash_commit_template\": null,    \"statistics\": {      \"commit_count\": 37,      \"storage_size\": 1038090,      \"repository_size\": 1038090,      \"lfs_objects_size\": 0,      \"job_artifacts_size\": 0      \"pipeline_artifacts_size\": 0,      \"packages_size\": 0,      \"snippets_size\": 0,      \"uploads_size\": 0    },    \"container_registry_image_prefix\": \"registry.example.com/diaspora/diaspora-client\",    \"_links\": {      \"self\": \"http://example.com/api/v4/projects\",      \"issues\": \"http://example.com/api/v4/projects/1/issues\",      \"merge_requests\": \"http://example.com/api/v4/projects/1/merge_requests\",      \"repo_branches\": \"http://example.com/api/v4/projects/1/repository_branches\",      \"labels\": \"http://example.com/api/v4/projects/1/labels\",      \"events\": \"http://example.com/api/v4/projects/1/events\",      \"members\": \"http://example.com/api/v4/projects/1/members\"    }  },  {    \"id\": 6,    \"description\": null,    \"default_branch\": \"master\",    \"visibility\": \"private\",    \"ssh_url_to_repo\": \"git@example.com:brightbox/puppet.git\",    \"http_url_to_repo\": \"http://example.com/brightbox/puppet.git\",    \"web_url\": \"http://example.com/brightbox/puppet\",    \"readme_url\": \"http://example.com/brightbox/puppet/blob/master/README.md\",    \"tag_list\": [ //deprecated, use `topics` instead      \"example\",      \"puppet\"    ],    \"topics\": [      \"example\",      \"puppet\"    ],    \"owner\": {      \"id\": 4,      \"name\": \"Brightbox\",      \"created_at\": \"2013-09-30T13:46:02Z\"    },    \"name\": \"Puppet\",    \"name_with_namespace\": \"Brightbox / Puppet\",    \"path\": \"puppet\",    \"path_with_namespace\": \"brightbox/puppet\",    \"issues_enabled\": true,    \"open_issues_count\": 1,    \"merge_requests_enabled\": true,    \"jobs_enabled\": true,    \"wiki_enabled\": true,    \"snippets_enabled\": false,    \"can_create_merge_request_in\": true,    \"resolve_outdated_diff_discussions\": false,    \"container_registry_enabled\": false, // deprecated, use container_registry_access_level instead    \"container_registry_access_level\": \"disabled\",    \"security_and_compliance_access_level\": \"disabled\",    \"created_at\": \"2013-09-30T13:46:02Z\",    \"last_activity_at\": \"2013-09-30T13:46:02Z\",    \"creator_id\": 3,    \"namespace\": {      \"id\": 4,      \"name\": \"Brightbox\",      \"path\": \"brightbox\",      \"kind\": \"group\",      \"full_path\": \"brightbox\"    },    \"import_status\": \"none\",    \"import_error\": null,    \"permissions\": {      \"project_access\": {        \"access_level\": 10,        \"notification_level\": 3      },      \"group_access\": {        \"access_level\": 50,        \"notification_level\": 3      }    },    \"archived\": false,    \"avatar_url\": null,    \"shared_runners_enabled\": true,    \"forks_count\": 0,    \"star_count\": 0,    \"runners_token\": \"b8547b1dc37721d05889db52fa2f02\",    \"public_jobs\": true,    \"shared_with_groups\": [],    \"only_allow_merge_if_pipeline_succeeds\": false,    \"allow_merge_on_skipped_pipeline\": false,    \"restrict_user_defined_variables\": false,    \"only_allow_merge_if_all_discussions_are_resolved\": false,    \"remove_source_branch_after_merge\": false,    \"request_access_enabled\": false,    \"merge_method\": \"merge\",    \"squash_option\": \"default_on\",    \"auto_devops_enabled\": true,    \"auto_devops_deploy_strategy\": \"continuous\",    \"repository_storage\": \"default\",    \"approvals_before_merge\": 0,    \"mirror\": false,    \"mirror_user_id\": 45,    \"mirror_trigger_builds\": false,    \"only_mirror_protected_branches\": false,    \"mirror_overwrites_diverged_branches\": false,    \"external_authorization_classification_label\": null,    \"packages_enabled\": true,    \"service_desk_enabled\": false,    \"service_desk_address\": null,    \"autoclose_referenced_issues\": true,    \"suggestion_commit_message\": null,    \"merge_commit_template\": null,    \"squash_commit_template\": null,    \"statistics\": {      \"commit_count\": 12,      \"storage_size\": 2066080,      \"repository_size\": 2066080,      \"lfs_objects_size\": 0,      \"job_artifacts_size\": 0      \"pipeline_artifacts_size\": 0,      \"packages_size\": 0,      \"snippets_size\": 0,      \"uploads_size\": 0    },    \"container_registry_image_prefix\": \"registry.example.com/brightbox/puppet\",    \"_links\": {      \"self\": \"http://example.com/api/v4/projects\",      \"issues\": \"http://example.com/api/v4/projects/1/issues\",      \"merge_requests\": \"http://example.com/api/v4/projects/1/merge_requests\",      \"repo_branches\": \"http://example.com/api/v4/projects/1/repository_branches\",      \"labels\": \"http://example.com/api/v4/projects/1/labels\",      \"events\": \"http://example.com/api/v4/projects/1/events\",      \"members\": \"http://example.com/api/v4/projects/1/members\"    }  }]"
    },
    {
      "name": "Get single project",
      "description": "If the project is a fork, the forked_from_project field appears in the response. For this field, if the upstream project is private, a valid token for authentication must be provided. The field mr_default_target_self appears as well. If this value is false, then all merge requests will target the upstream project by default.",
      "resources": [
        {
          "method": "GET",
          "path": "/projects/:id"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        },
        {
          "name": "license",
          "type": "boolean",
          "required": false,
          "description": "Include project license data."
        },
        {
          "name": "statistics",
          "type": "boolean",
          "required": false,
          "description": "Include project statistics. Only available to Reporter or higher level role members."
        },
        {
          "name": "with_custom_attributes",
          "type": "boolean",
          "required": false,
          "description": "Include custom attributes in response. (administrators only)"
        }
      ],
      "response": "{   \"id\":3,   ...   \"mr_default_target_self\": false,   \"forked_from_project\":{      \"id\":13083,      \"description\":\"GitLab Community Edition\",      \"name\":\"GitLab Community Edition\",      \"name_with_namespace\":\"GitLab.org / GitLab Community Edition\",      \"path\":\"gitlab-foss\",      \"path_with_namespace\":\"gitlab-org/gitlab-foss\",      \"created_at\":\"2013-09-26T06:02:36.000Z\",      \"default_branch\":\"master\",      \"tag_list\":[], //deprecated, use `topics` instead      \"topics\":[],      \"ssh_url_to_repo\":\"git@gitlab.com:gitlab-org/gitlab-foss.git\",      \"http_url_to_repo\":\"https://gitlab.com/gitlab-org/gitlab-foss.git\",      \"web_url\":\"https://gitlab.com/gitlab-org/gitlab-foss\",      \"avatar_url\":\"https://gitlab.com/uploads/-/system/project/avatar/13083/logo-extra-whitespace.png\",      \"license_url\": \"https://gitlab.com/gitlab-org/gitlab/-/blob/master/LICENSE\",      \"license\": {        \"key\": \"mit\",        \"name\": \"MIT License\",        \"nickname\": null,        \"html_url\": \"http://choosealicense.com/licenses/mit/\",        \"source_url\": \"https://opensource.org/licenses/MIT\"      },      \"star_count\":3812,      \"forks_count\":3561,      \"last_activity_at\":\"2018-01-02T11:40:26.570Z\",      \"namespace\": {            \"id\": 72,            \"name\": \"GitLab.org\",            \"path\": \"gitlab-org\",            \"kind\": \"group\",            \"full_path\": \"gitlab-org\",            \"parent_id\": null      }   }   ...}"
    },
    {
      "name": "Templates for issues and merge requests",
      "description": "Users of GitLab Premium or higher can also see the issues_template and merge_requests_template parameters for managing issue and merge request description templates.",
      "resources": [],
      "attributes": [],
      "response": "{  \"id\": 3,  \"issues_template\": null,  \"merge_requests_template\": null,  ...}"
    },
    {
      "name": "Get project users",
      "description": "Get the users list of a project.",
      "resources": [
        {
          "method": "GET",
          "path": "/projects/:id/users"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        },
        {
          "name": "search",
          "type": "string",
          "required": false,
          "description": "Search for specific users."
        },
        {
          "name": "skip_users",
          "type": "integer array",
          "required": false,
          "description": "Filter out users with the specified IDs."
        }
      ],
      "response": [
        {
          "id": 1,
          "username": "john_smith",
          "name": "John Smith",
          "state": "active",
          "avatar_url": "http://localhost:3000/uploads/user/avatar/1/cd8.jpeg",
          "web_url": "http://localhost:3000/john_smith"
        },
        {
          "id": 2,
          "username": "jack_smith",
          "name": "Jack Smith",
          "state": "blocked",
          "avatar_url": "http://gravatar.com/../e32131cd8.jpeg",
          "web_url": "http://localhost:3000/jack_smith"
        }
      ]
    },
    {
      "name": "List a projectâ€™s groups",
      "description": "Get a list of ancestor groups for this project.",
      "resources": [
        {
          "method": "GET",
          "path": "/projects/:id/groups"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        },
        {
          "name": "search",
          "type": "string",
          "required": false,
          "description": "Search for specific groups."
        },
        {
          "name": "shared_min_access_level",
          "type": "integer",
          "required": false,
          "description": "Limit to shared groups with at least this access level."
        },
        {
          "name": "shared_visible_only",
          "type": "boolean",
          "required": false,
          "description": "Limit to shared groups user has access to."
        },
        {
          "name": "skip_groups",
          "type": "array of integers",
          "required": false,
          "description": "Skip the group IDs passed."
        },
        {
          "name": "with_shared",
          "type": "boolean",
          "required": false,
          "description": "Include projects shared with this group. Default is false."
        }
      ],
      "response": "[  {    \"id\": 1,    \"name\": \"Foobar Group\",    \"avatar_url\": \"http://localhost:3000/uploads/group/avatar/1/foo.jpg\",    \"web_url\": \"http://localhost:3000/groups/foo-bar\",    \"full_name\": \"Foobar Group\",    \"full_path\": \"foo-bar\",  },  {    \"id\": 2,    \"name\": \"Shared Group\",    \"avatar_url\": \"http://gitlab.example.com/uploads/group/avatar/1/bar.jpg\",    \"web_url\": \"http://gitlab.example.com/groups/foo/bar\",    \"full_name\": \"Shared Group\",    \"full_path\": \"foo/shared\",  }]"
    },
    {
      "name": "Get project events",
      "description": "Refer to the Events API documentation.",
      "resources": [],
      "attributes": [],
      "response": {}
    },
    {
      "name": "Create project",
      "description": "If your HTTP repository isnâ€™t publicly accessible, add authentication information to the URL https://username:password@gitlab.company.com/group/project.git, where password is a public access key with the api scope enabled.",
      "resources": [
        {
          "method": "POST",
          "path": "/projects"
        }
      ],
      "attributes": [
        {
          "name": "name",
          "type": "string",
          "required": false,
          "description": "The name of the new project. Equals path if not provided."
        },
        {
          "name": "path",
          "type": "string",
          "required": false,
          "description": "Repository name for new project. Generated based on name if not provided (generated as lowercase with dashes). Starting with GitLab 14.9, path must not start or end with a special character and must not contain consecutive special characters."
        },
        {
          "name": "allow_merge_on_skipped_pipeline",
          "type": "boolean",
          "required": false,
          "description": "Set whether or not merge requests can be merged with skipped jobs."
        },
        {
          "name": "analytics_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private or enabled"
        },
        {
          "name": "approvals_before_merge",
          "type": "integer",
          "required": false,
          "description": "How many approvers should approve merge requests by default. To configure approval rules, see Merge request approvals API."
        },
        {
          "name": "auto_cancel_pending_pipelines",
          "type": "string",
          "required": false,
          "description": "Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled."
        },
        {
          "name": "auto_devops_deploy_strategy",
          "type": "string",
          "required": false,
          "description": "Auto Deploy strategy (continuous, manual or timed_incremental)."
        },
        {
          "name": "auto_devops_enabled",
          "type": "boolean",
          "required": false,
          "description": "Enable Auto DevOps for this project."
        },
        {
          "name": "autoclose_referenced_issues",
          "type": "boolean",
          "required": false,
          "description": "Set whether auto-closing referenced issues on default branch."
        },
        {
          "name": "avatar",
          "type": "mixed",
          "required": false,
          "description": "Image file for avatar of the project."
        },
        {
          "name": "build_coverage_regex",
          "type": "string",
          "required": false,
          "description": "Test coverage parsing."
        },
        {
          "name": "build_git_strategy",
          "type": "string",
          "required": false,
          "description": "The Git strategy. Defaults to fetch."
        },
        {
          "name": "build_timeout",
          "type": "integer",
          "required": false,
          "description": "The maximum amount of time, in seconds, that a job can run."
        },
        {
          "name": "builds_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "ci_config_path",
          "type": "string",
          "required": false,
          "description": "The path to CI configuration file."
        },
        {
          "name": "container_expiration_policy_attributes",
          "type": "hash",
          "required": false,
          "description": "Update the image cleanup policy for this project. Accepts: cadence (string), keep_n (integer), older_than (string), name_regex (string), name_regex_delete (string), name_regex_keep (string), enabled (boolean). Valid values for cadence are: 1d (every day), 7d (every week), 14d (every two weeks), 1month (every month), or 3month (every quarter)."
        },
        {
          "name": "container_registry_access_level",
          "type": "string",
          "required": false,
          "description": "Set visibility of container registry, for this project, to one of disabled, private or enabled."
        },
        {
          "name": "container_registry_enabled",
          "type": "boolean",
          "required": false,
          "description": "(Deprecated) Enable container registry for this project. Use container_registry_access_level instead."
        },
        {
          "name": "default_branch",
          "type": "string",
          "required": false,
          "description": "The default branch name. Requires initialize_with_readme to be true."
        },
        {
          "name": "description",
          "type": "string",
          "required": false,
          "description": "Short project description."
        },
        {
          "name": "emails_disabled",
          "type": "boolean",
          "required": false,
          "description": "Disable email notifications."
        },
        {
          "name": "external_authorization_classification_label",
          "type": "string",
          "required": false,
          "description": "The classification label for the project."
        },
        {
          "name": "forking_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "group_with_project_templates_id",
          "type": "integer",
          "required": false,
          "description": "For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use_custom_template to be true."
        },
        {
          "name": "import_url",
          "type": "string",
          "required": false,
          "description": "URL to import repository from."
        },
        {
          "name": "initialize_with_readme",
          "type": "boolean",
          "required": false,
          "description": "false by default."
        },
        {
          "name": "issues_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "issues_enabled",
          "type": "boolean",
          "required": false,
          "description": "(Deprecated) Enable issues for this project. Use issues_access_level instead."
        },
        {
          "name": "jobs_enabled",
          "type": "boolean",
          "required": false,
          "description": "(Deprecated) Enable jobs for this project. Use builds_access_level instead."
        },
        {
          "name": "lfs_enabled",
          "type": "boolean",
          "required": false,
          "description": "Enable LFS."
        },
        {
          "name": "merge_method",
          "type": "string",
          "required": false,
          "description": "Set the merge method used."
        },
        {
          "name": "merge_pipelines_enabled",
          "type": "boolean",
          "required": false,
          "description": "Enable or disable merge pipelines."
        },
        {
          "name": "merge_requests_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "merge_requests_enabled",
          "type": "boolean",
          "required": false,
          "description": "(Deprecated) Enable merge requests for this project. Use merge_requests_access_level instead."
        },
        {
          "name": "merge_trains_enabled",
          "type": "boolean",
          "required": false,
          "description": "Enable or disable merge trains."
        },
        {
          "name": "mirror_trigger_builds",
          "type": "boolean",
          "required": false,
          "description": "Pull mirroring triggers builds."
        },
        {
          "name": "mirror",
          "type": "boolean",
          "required": false,
          "description": "Enables pull mirroring in a project."
        },
        {
          "name": "namespace_id",
          "type": "integer",
          "required": false,
          "description": "Namespace for the new project (defaults to the current userâ€™s namespace)."
        },
        {
          "name": "only_allow_merge_if_all_discussions_are_resolved",
          "type": "boolean",
          "required": false,
          "description": "Set whether merge requests can only be merged when all the discussions are resolved."
        },
        {
          "name": "only_allow_merge_if_pipeline_succeeds",
          "type": "boolean",
          "required": false,
          "description": "Set whether merge requests can only be merged with successful pipelines. This setting is named Pipelines must succeed in the project settings."
        },
        {
          "name": "operations_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "packages_enabled",
          "type": "boolean",
          "required": false,
          "description": "Enable or disable packages repository feature."
        },
        {
          "name": "pages_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, enabled, or public."
        },
        {
          "name": "printing_merge_request_link_enabled",
          "type": "boolean",
          "required": false,
          "description": "Show link to create/view merge request when pushing from the command line."
        },
        {
          "name": "public_builds",
          "type": "boolean",
          "required": false,
          "description": "If true, jobs can be viewed by non-project members."
        },
        {
          "name": "remove_source_branch_after_merge",
          "type": "boolean",
          "required": false,
          "description": "Enable Delete source branch option by default for all new merge requests."
        },
        {
          "name": "repository_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "repository_storage",
          "type": "string",
          "required": false,
          "description": "Which storage shard the repository is on. (administrator only)"
        },
        {
          "name": "request_access_enabled",
          "type": "boolean",
          "required": false,
          "description": "Allow users to request member access."
        },
        {
          "name": "requirements_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private or enabled"
        },
        {
          "name": "resolve_outdated_diff_discussions",
          "type": "boolean",
          "required": false,
          "description": "Automatically resolve merge request diffs discussions on lines changed with a push."
        },
        {
          "name": "security_and_compliance_access_level",
          "type": "string",
          "required": false,
          "description": "(GitLab 14.9 and later) Security and compliance access level. One of disabled, private, or enabled."
        },
        {
          "name": "shared_runners_enabled",
          "type": "boolean",
          "required": false,
          "description": "Enable shared runners for this project."
        },
        {
          "name": "snippets_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "snippets_enabled",
          "type": "boolean",
          "required": false,
          "description": "(Deprecated) Enable snippets for this project. Use snippets_access_level instead."
        },
        {
          "name": "squash_option",
          "type": "string",
          "required": false,
          "description": "One of never, always, default_on, or default_off."
        },
        {
          "name": "tag_list",
          "type": "array",
          "required": false,
          "description": "(Deprecated in GitLab 14.0) The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead."
        },
        {
          "name": "template_name",
          "type": "string",
          "required": false,
          "description": "When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of a custom project template."
        },
        {
          "name": "template_project_id",
          "type": "integer",
          "required": false,
          "description": "When used with use_custom_template, project ID of a custom project template. This is preferable to using template_name since template_name may be ambiguous."
        },
        {
          "name": "topics",
          "type": "array",
          "required": false,
          "description": "The list of topics for a project; put array of topics, that should be finally assigned to a project. (Introduced in GitLab 14.0.)"
        },
        {
          "name": "use_custom_template",
          "type": "boolean",
          "required": false,
          "description": "Use either custom instance or group (with group_with_project_templates_id) project template."
        },
        {
          "name": "visibility",
          "type": "string",
          "required": false,
          "description": "See project visibility level."
        },
        {
          "name": "wiki_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "wiki_enabled",
          "type": "boolean",
          "required": false,
          "description": "(Deprecated) Enable wiki for this project. Use wiki_access_level instead."
        }
      ],
      "response": {}
    },
    {
      "name": "Create project for user",
      "description": "If your HTTP repository isnâ€™t publicly accessible, add authentication information to the URL https://username:password@gitlab.company.com/group/project.git, where password is a public access key with the api scope enabled.",
      "resources": [
        {
          "method": "POST",
          "path": "/projects/user/:user_id"
        }
      ],
      "attributes": [
        {
          "name": "user_id",
          "type": "integer",
          "required": false,
          "description": "The user ID of the project owner."
        },
        {
          "name": "name",
          "type": "string",
          "required": false,
          "description": "The name of the new project."
        },
        {
          "name": "allow_merge_on_skipped_pipeline",
          "type": "boolean",
          "required": false,
          "description": "Set whether or not merge requests can be merged with skipped jobs."
        },
        {
          "name": "analytics_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private or enabled"
        },
        {
          "name": "approvals_before_merge",
          "type": "integer",
          "required": false,
          "description": "How many approvers should approve merge requests by default. To configure approval rules, see Merge request approvals API."
        },
        {
          "name": "auto_cancel_pending_pipelines",
          "type": "string",
          "required": false,
          "description": "Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled."
        },
        {
          "name": "auto_devops_deploy_strategy",
          "type": "string",
          "required": false,
          "description": "Auto Deploy strategy (continuous, manual or timed_incremental)."
        },
        {
          "name": "auto_devops_enabled",
          "type": "boolean",
          "required": false,
          "description": "Enable Auto DevOps for this project."
        },
        {
          "name": "autoclose_referenced_issues",
          "type": "boolean",
          "required": false,
          "description": "Set whether auto-closing referenced issues on default branch."
        },
        {
          "name": "avatar",
          "type": "mixed",
          "required": false,
          "description": "Image file for avatar of the project."
        },
        {
          "name": "build_coverage_regex",
          "type": "string",
          "required": false,
          "description": "Test coverage parsing."
        },
        {
          "name": "build_git_strategy",
          "type": "string",
          "required": false,
          "description": "The Git strategy. Defaults to fetch."
        },
        {
          "name": "build_timeout",
          "type": "integer",
          "required": false,
          "description": "The maximum amount of time, in seconds, that a job can run."
        },
        {
          "name": "builds_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "ci_config_path",
          "type": "string",
          "required": false,
          "description": "The path to CI configuration file."
        },
        {
          "name": "container_registry_access_level",
          "type": "string",
          "required": false,
          "description": "Set visibility of container registry, for this project, to one of disabled, private or enabled."
        },
        {
          "name": "container_registry_enabled",
          "type": "boolean",
          "required": false,
          "description": "(Deprecated) Enable container registry for this project. Use container_registry_access_level instead."
        },
        {
          "name": "default_branch",
          "type": "string",
          "required": false,
          "description": "The default branch name. Requires initialize_with_readme to be true."
        },
        {
          "name": "description",
          "type": "string",
          "required": false,
          "description": "Short project description."
        },
        {
          "name": "emails_disabled",
          "type": "boolean",
          "required": false,
          "description": "Disable email notifications."
        },
        {
          "name": "external_authorization_classification_label",
          "type": "string",
          "required": false,
          "description": "The classification label for the project."
        },
        {
          "name": "forking_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "group_with_project_templates_id",
          "type": "integer",
          "required": false,
          "description": "For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use_custom_template to be true."
        },
        {
          "name": "import_url",
          "type": "string",
          "required": false,
          "description": "URL to import repository from."
        },
        {
          "name": "initialize_with_readme",
          "type": "boolean",
          "required": false,
          "description": "false by default."
        },
        {
          "name": "issues_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "issues_enabled",
          "type": "boolean",
          "required": false,
          "description": "(Deprecated) Enable issues for this project. Use issues_access_level instead."
        },
        {
          "name": "jobs_enabled",
          "type": "boolean",
          "required": false,
          "description": "(Deprecated) Enable jobs for this project. Use builds_access_level instead."
        },
        {
          "name": "lfs_enabled",
          "type": "boolean",
          "required": false,
          "description": "Enable LFS."
        },
        {
          "name": "merge_commit_template",
          "type": "string",
          "required": false,
          "description": "Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)"
        },
        {
          "name": "merge_method",
          "type": "string",
          "required": false,
          "description": "Set the merge method used."
        },
        {
          "name": "merge_requests_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "merge_requests_enabled",
          "type": "boolean",
          "required": false,
          "description": "(Deprecated) Enable merge requests for this project. Use merge_requests_access_level instead."
        },
        {
          "name": "mirror_trigger_builds",
          "type": "boolean",
          "required": false,
          "description": "Pull mirroring triggers builds."
        },
        {
          "name": "mirror",
          "type": "boolean",
          "required": false,
          "description": "Enables pull mirroring in a project."
        },
        {
          "name": "namespace_id",
          "type": "integer",
          "required": false,
          "description": "Namespace for the new project (defaults to the current userâ€™s namespace)."
        },
        {
          "name": "only_allow_merge_if_all_discussions_are_resolved",
          "type": "boolean",
          "required": false,
          "description": "Set whether merge requests can only be merged when all the discussions are resolved."
        },
        {
          "name": "only_allow_merge_if_pipeline_succeeds",
          "type": "boolean",
          "required": false,
          "description": "Set whether merge requests can only be merged with successful jobs."
        },
        {
          "name": "operations_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "packages_enabled",
          "type": "boolean",
          "required": false,
          "description": "Enable or disable packages repository feature."
        },
        {
          "name": "pages_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, enabled, or public."
        },
        {
          "name": "path",
          "type": "string",
          "required": false,
          "description": "Custom repository name for new project. By default generated based on name."
        },
        {
          "name": "printing_merge_request_link_enabled",
          "type": "boolean",
          "required": false,
          "description": "Show link to create/view merge request when pushing from the command line."
        },
        {
          "name": "public_builds",
          "type": "boolean",
          "required": false,
          "description": "If true, jobs can be viewed by non-project-members."
        },
        {
          "name": "remove_source_branch_after_merge",
          "type": "boolean",
          "required": false,
          "description": "Enable Delete source branch option by default for all new merge requests."
        },
        {
          "name": "repository_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "repository_storage",
          "type": "string",
          "required": false,
          "description": "Which storage shard the repository is on. (administrators only)"
        },
        {
          "name": "request_access_enabled",
          "type": "boolean",
          "required": false,
          "description": "Allow users to request member access."
        },
        {
          "name": "requirements_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, enabled or public"
        },
        {
          "name": "resolve_outdated_diff_discussions",
          "type": "boolean",
          "required": false,
          "description": "Automatically resolve merge request diffs discussions on lines changed with a push."
        },
        {
          "name": "security_and_compliance_access_level",
          "type": "string",
          "required": false,
          "description": "(GitLab 14.9 and later) Security and compliance access level. One of disabled, private, or enabled."
        },
        {
          "name": "shared_runners_enabled",
          "type": "boolean",
          "required": false,
          "description": "Enable shared runners for this project."
        },
        {
          "name": "snippets_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "snippets_enabled",
          "type": "boolean",
          "required": false,
          "description": "(Deprecated) Enable snippets for this project. Use snippets_access_level instead."
        },
        {
          "name": "squash_commit_template",
          "type": "string",
          "required": false,
          "description": "Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)"
        },
        {
          "name": "squash_option",
          "type": "string",
          "required": false,
          "description": "One of never, always, default_on, or default_off."
        },
        {
          "name": "suggestion_commit_message",
          "type": "string",
          "required": false,
          "description": "The commit message used to apply merge request suggestions."
        },
        {
          "name": "tag_list",
          "type": "array",
          "required": false,
          "description": "(Deprecated in GitLab 14.0) The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead."
        },
        {
          "name": "template_name",
          "type": "string",
          "required": false,
          "description": "When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of a custom project template."
        },
        {
          "name": "topics",
          "type": "array",
          "required": false,
          "description": "The list of topics for the project. (Introduced in GitLab 14.0.)"
        },
        {
          "name": "use_custom_template",
          "type": "boolean",
          "required": false,
          "description": "Use either custom instance or group (with group_with_project_templates_id) project template."
        },
        {
          "name": "visibility",
          "type": "string",
          "required": false,
          "description": "See project visibility level."
        },
        {
          "name": "wiki_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "wiki_enabled",
          "type": "boolean",
          "required": false,
          "description": "(Deprecated) Enable wiki for this project. Use wiki_access_level instead."
        }
      ],
      "response": {}
    },
    {
      "name": "Edit project",
      "description": "Supported attributes:",
      "resources": [
        {
          "method": "PUT",
          "path": "/projects/:id"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        },
        {
          "name": "allow_merge_on_skipped_pipeline",
          "type": "boolean",
          "required": false,
          "description": "Set whether or not merge requests can be merged with skipped jobs."
        },
        {
          "name": "analytics_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private or enabled"
        },
        {
          "name": "approvals_before_merge",
          "type": "integer",
          "required": false,
          "description": "How many approvers should approve merge request by default. To configure approval rules, see Merge request approvals API."
        },
        {
          "name": "auto_cancel_pending_pipelines",
          "type": "string",
          "required": false,
          "description": "Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled."
        },
        {
          "name": "auto_devops_deploy_strategy",
          "type": "string",
          "required": false,
          "description": "Auto Deploy strategy (continuous, manual, or timed_incremental)."
        },
        {
          "name": "auto_devops_enabled",
          "type": "boolean",
          "required": false,
          "description": "Enable Auto DevOps for this project."
        },
        {
          "name": "autoclose_referenced_issues",
          "type": "boolean",
          "required": false,
          "description": "Set whether auto-closing referenced issues on default branch."
        },
        {
          "name": "avatar",
          "type": "mixed",
          "required": false,
          "description": "Image file for avatar of the project."
        },
        {
          "name": "build_coverage_regex",
          "type": "string",
          "required": false,
          "description": "Test coverage parsing."
        },
        {
          "name": "build_git_strategy",
          "type": "string",
          "required": false,
          "description": "The Git strategy. Defaults to fetch."
        },
        {
          "name": "build_timeout",
          "type": "integer",
          "required": false,
          "description": "The maximum amount of time, in seconds, that a job can run."
        },
        {
          "name": "builds_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "ci_config_path",
          "type": "string",
          "required": false,
          "description": "The path to CI configuration file."
        },
        {
          "name": "ci_default_git_depth",
          "type": "integer",
          "required": false,
          "description": "Default number of revisions for shallow cloning."
        },
        {
          "name": "ci_forward_deployment_enabled",
          "type": "boolean",
          "required": false,
          "description": "When a new deployment job starts, skip older deployment jobs that are still pending"
        },
        {
          "name": "container_expiration_policy_attributes",
          "type": "hash",
          "required": false,
          "description": "Update the image cleanup policy for this project. Accepts: cadence (string), keep_n (integer), older_than (string), name_regex (string), name_regex_delete (string), name_regex_keep (string), enabled (boolean)."
        },
        {
          "name": "container_registry_access_level",
          "type": "string",
          "required": false,
          "description": "Set visibility of container registry, for this project, to one of disabled, private or enabled."
        },
        {
          "name": "container_registry_enabled",
          "type": "boolean",
          "required": false,
          "description": "(Deprecated) Enable container registry for this project. Use container_registry_access_level instead."
        },
        {
          "name": "default_branch",
          "type": "string",
          "required": false,
          "description": "The default branch name."
        },
        {
          "name": "description",
          "type": "string",
          "required": false,
          "description": "Short project description."
        },
        {
          "name": "emails_disabled",
          "type": "boolean",
          "required": false,
          "description": "Disable email notifications."
        },
        {
          "name": "external_authorization_classification_label",
          "type": "string",
          "required": false,
          "description": "The classification label for the project."
        },
        {
          "name": "forking_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "import_url",
          "type": "string",
          "required": false,
          "description": "URL to import repository from."
        },
        {
          "name": "issues_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "issues_enabled",
          "type": "boolean",
          "required": false,
          "description": "(Deprecated) Enable issues for this project. Use issues_access_level instead."
        },
        {
          "name": "issues_template",
          "type": "string",
          "required": false,
          "description": "Default description for Issues. Description is parsed with GitLab Flavored Markdown. See Templates for issues and merge requests."
        },
        {
          "name": "jobs_enabled",
          "type": "boolean",
          "required": false,
          "description": "(Deprecated) Enable jobs for this project. Use builds_access_level instead."
        },
        {
          "name": "keep_latest_artifact",
          "type": "boolean",
          "required": false,
          "description": "Disable or enable the ability to keep the latest artifact for this project."
        },
        {
          "name": "lfs_enabled",
          "type": "boolean",
          "required": false,
          "description": "Enable LFS."
        },
        {
          "name": "merge_commit_template",
          "type": "string",
          "required": false,
          "description": "Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)"
        },
        {
          "name": "merge_method",
          "type": "string",
          "required": false,
          "description": "Set the merge method used."
        },
        {
          "name": "merge_pipelines_enabled",
          "type": "boolean",
          "required": false,
          "description": "Enable or disable merge pipelines."
        },
        {
          "name": "merge_requests_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "merge_requests_enabled",
          "type": "boolean",
          "required": false,
          "description": "(Deprecated) Enable merge requests for this project. Use merge_requests_access_level instead."
        },
        {
          "name": "merge_requests_template",
          "type": "string",
          "required": false,
          "description": "Default description for merge requests. Description is parsed with GitLab Flavored Markdown. See Templates for issues and merge requests."
        },
        {
          "name": "merge_trains_enabled",
          "type": "boolean",
          "required": false,
          "description": "Enable or disable merge trains."
        },
        {
          "name": "mirror_overwrites_diverged_branches",
          "type": "boolean",
          "required": false,
          "description": "Pull mirror overwrites diverged branches."
        },
        {
          "name": "mirror_trigger_builds",
          "type": "boolean",
          "required": false,
          "description": "Pull mirroring triggers builds."
        },
        {
          "name": "mirror_user_id",
          "type": "integer",
          "required": false,
          "description": "User responsible for all the activity surrounding a pull mirror event. (administrators only)"
        },
        {
          "name": "mirror",
          "type": "boolean",
          "required": false,
          "description": "Enables pull mirroring in a project."
        },
        {
          "name": "mr_default_target_self",
          "type": "boolean",
          "required": false,
          "description": "For forked projects, target merge requests to this project. If false, the target will be the upstream project."
        },
        {
          "name": "name",
          "type": "string",
          "required": false,
          "description": "The name of the project."
        },
        {
          "name": "only_allow_merge_if_all_discussions_are_resolved",
          "type": "boolean",
          "required": false,
          "description": "Set whether merge requests can only be merged when all the discussions are resolved."
        },
        {
          "name": "only_allow_merge_if_pipeline_succeeds",
          "type": "boolean",
          "required": false,
          "description": "Set whether merge requests can only be merged with successful jobs."
        },
        {
          "name": "only_mirror_protected_branches",
          "type": "boolean",
          "required": false,
          "description": "Only mirror protected branches."
        },
        {
          "name": "operations_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "packages_enabled",
          "type": "boolean",
          "required": false,
          "description": "Enable or disable packages repository feature."
        },
        {
          "name": "pages_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, enabled, or public."
        },
        {
          "name": "path",
          "type": "string",
          "required": false,
          "description": "Custom repository name for the project. By default generated based on name."
        },
        {
          "name": "printing_merge_request_link_enabled",
          "type": "boolean",
          "required": false,
          "description": "Show link to create/view merge request when pushing from the command line."
        },
        {
          "name": "public_builds",
          "type": "boolean",
          "required": false,
          "description": "If true, jobs can be viewed by non-project members."
        },
        {
          "name": "remove_source_branch_after_merge",
          "type": "boolean",
          "required": false,
          "description": "Enable Delete source branch option by default for all new merge requests."
        },
        {
          "name": "repository_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "repository_storage",
          "type": "string",
          "required": false,
          "description": "Which storage shard the repository is on. (administrators only)"
        },
        {
          "name": "request_access_enabled",
          "type": "boolean",
          "required": false,
          "description": "Allow users to request member access."
        },
        {
          "name": "requirements_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, enabled or public"
        },
        {
          "name": "resolve_outdated_diff_discussions",
          "type": "boolean",
          "required": false,
          "description": "Automatically resolve merge request diffs discussions on lines changed with a push."
        },
        {
          "name": "restrict_user_defined_variables",
          "type": "boolean",
          "required": false,
          "description": "Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline. For example when the pipeline is triggered in the UI, with the API, or by a trigger token."
        },
        {
          "name": "security_and_compliance_access_level",
          "type": "string",
          "required": false,
          "description": "(GitLab 14.9 and later) Security and compliance access level. One of disabled, private, or enabled."
        },
        {
          "name": "service_desk_enabled",
          "type": "boolean",
          "required": false,
          "description": "Enable or disable Service Desk feature."
        },
        {
          "name": "shared_runners_enabled",
          "type": "boolean",
          "required": false,
          "description": "Enable shared runners for this project."
        },
        {
          "name": "snippets_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "snippets_enabled",
          "type": "boolean",
          "required": false,
          "description": "(Deprecated) Enable snippets for this project. Use snippets_access_level instead."
        },
        {
          "name": "squash_commit_template",
          "type": "string",
          "required": false,
          "description": "Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)"
        },
        {
          "name": "squash_option",
          "type": "string",
          "required": false,
          "description": "One of never, always, default_on, or default_off."
        },
        {
          "name": "suggestion_commit_message",
          "type": "string",
          "required": false,
          "description": "The commit message used to apply merge request suggestions."
        },
        {
          "name": "tag_list",
          "type": "array",
          "required": false,
          "description": "(Deprecated in GitLab 14.0) The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead."
        },
        {
          "name": "topics",
          "type": "array",
          "required": false,
          "description": "The list of topics for the project. This replaces any existing topics that are already added to the project. (Introduced in GitLab 14.0.)"
        },
        {
          "name": "visibility",
          "type": "string",
          "required": false,
          "description": "See project visibility level."
        },
        {
          "name": "wiki_access_level",
          "type": "string",
          "required": false,
          "description": "One of disabled, private, or enabled."
        },
        {
          "name": "wiki_enabled",
          "type": "boolean",
          "required": false,
          "description": "(Deprecated) Enable wiki for this project. Use wiki_access_level instead."
        }
      ],
      "response": {}
    },
    {
      "name": "Fork project",
      "description": "The forking operation for a project is asynchronous and is completed in a background job. The request returns immediately. To determine whether the fork of the project has completed, query the import_status for the new project.",
      "resources": [
        {
          "method": "POST",
          "path": "/projects/:id/fork"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        },
        {
          "name": "description",
          "type": "string",
          "required": false,
          "description": "The description assigned to the resultant project after forking."
        },
        {
          "name": "mr_default_target_self",
          "type": "boolean",
          "required": false,
          "description": "For forked projects, target merge requests to this project. If false, the target will be the upstream project."
        },
        {
          "name": "name",
          "type": "string",
          "required": false,
          "description": "The name assigned to the resultant project after forking."
        },
        {
          "name": "namespace_id",
          "type": "integer",
          "required": false,
          "description": "The ID of the namespace that the project is forked to."
        },
        {
          "name": "namespace_path",
          "type": "string",
          "required": false,
          "description": "The path of the namespace that the project is forked to."
        },
        {
          "name": "namespace",
          "type": "integer or string",
          "required": false,
          "description": "(Deprecated) The ID or path of the namespace that the project is forked to."
        },
        {
          "name": "path",
          "type": "string",
          "required": false,
          "description": "The path assigned to the resultant project after forking."
        },
        {
          "name": "visibility",
          "type": "string",
          "required": false,
          "description": "The visibility level assigned to the resultant project after forking."
        }
      ],
      "response": {}
    },
    {
      "name": "List forks of a project",
      "description": "List the projects accessible to the calling user that have an established, forked relationship with the specified project",
      "resources": [
        {
          "method": "GET",
          "path": "/projects/:id/forks"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        },
        {
          "name": "archived",
          "type": "boolean",
          "required": false,
          "description": "Limit by archived status."
        },
        {
          "name": "membership",
          "type": "boolean",
          "required": false,
          "description": "Limit by projects that the current user is a member of."
        },
        {
          "name": "min_access_level",
          "type": "integer",
          "required": false,
          "description": "Limit by current user minimal access level."
        },
        {
          "name": "order_by",
          "type": "string",
          "required": false,
          "description": "Return projects ordered by id, name, path, created_at, updated_at, or last_activity_at fields. Default is created_at."
        },
        {
          "name": "owned",
          "type": "boolean",
          "required": false,
          "description": "Limit by projects explicitly owned by the current user."
        },
        {
          "name": "search",
          "type": "string",
          "required": false,
          "description": "Return list of projects matching the search criteria."
        },
        {
          "name": "simple",
          "type": "boolean",
          "required": false,
          "description": "Return only limited fields for each project. This is a no-op without authentication as then only simple fields are returned."
        },
        {
          "name": "sort",
          "type": "string",
          "required": false,
          "description": "Return projects sorted in asc or desc order. Default is desc."
        },
        {
          "name": "starred",
          "type": "boolean",
          "required": false,
          "description": "Limit by projects starred by the current user."
        },
        {
          "name": "statistics",
          "type": "boolean",
          "required": false,
          "description": "Include project statistics. Only available to Reporter or higher level role members."
        },
        {
          "name": "visibility",
          "type": "string",
          "required": false,
          "description": "Limit by visibility public, internal, or private."
        },
        {
          "name": "with_custom_attributes",
          "type": "boolean",
          "required": false,
          "description": "Include custom attributes in response. (administrators only)"
        },
        {
          "name": "with_issues_enabled",
          "type": "boolean",
          "required": false,
          "description": "Limit by enabled issues feature."
        },
        {
          "name": "with_merge_requests_enabled",
          "type": "boolean",
          "required": false,
          "description": "Limit by enabled merge requests feature."
        }
      ],
      "response": "[  {    \"id\": 3,    \"description\": null,    \"default_branch\": \"master\",    \"visibility\": \"internal\",    \"ssh_url_to_repo\": \"git@example.com:diaspora/diaspora-project-site.git\",    \"http_url_to_repo\": \"http://example.com/diaspora/diaspora-project-site.git\",    \"web_url\": \"http://example.com/diaspora/diaspora-project-site\",    \"readme_url\": \"http://example.com/diaspora/diaspora-project-site/blob/master/README.md\",    \"tag_list\": [ //deprecated, use `topics` instead      \"example\",      \"disapora project\"    ],    \"topics\": [      \"example\",      \"disapora project\"    ],    \"name\": \"Diaspora Project Site\",    \"name_with_namespace\": \"Diaspora / Diaspora Project Site\",    \"path\": \"diaspora-project-site\",    \"path_with_namespace\": \"diaspora/diaspora-project-site\",    \"issues_enabled\": true,    \"open_issues_count\": 1,    \"merge_requests_enabled\": true,    \"jobs_enabled\": true,    \"wiki_enabled\": true,    \"snippets_enabled\": false,    \"can_create_merge_request_in\": true,    \"resolve_outdated_diff_discussions\": false,    \"container_registry_enabled\": false, // deprecated, use container_registry_access_level instead    \"container_registry_access_level\": \"disabled\",    \"security_and_compliance_access_level\": \"disabled\",    \"created_at\": \"2013-09-30T13:46:02Z\",    \"last_activity_at\": \"2013-09-30T13:46:02Z\",    \"creator_id\": 3,    \"namespace\": {      \"id\": 3,      \"name\": \"Diaspora\",      \"path\": \"diaspora\",      \"kind\": \"group\",      \"full_path\": \"diaspora\"    },    \"import_status\": \"none\",    \"archived\": true,    \"avatar_url\": \"http://example.com/uploads/project/avatar/3/uploads/avatar.png\",    \"shared_runners_enabled\": true,    \"forks_count\": 0,    \"star_count\": 1,    \"public_jobs\": true,    \"shared_with_groups\": [],    \"only_allow_merge_if_pipeline_succeeds\": false,    \"allow_merge_on_skipped_pipeline\": false,    \"restrict_user_defined_variables\": false,    \"only_allow_merge_if_all_discussions_are_resolved\": false,    \"remove_source_branch_after_merge\": false,    \"request_access_enabled\": false,    \"merge_method\": \"merge\",    \"squash_option\": \"default_on\",    \"autoclose_referenced_issues\": true,    \"suggestion_commit_message\": null,    \"merge_commit_template\": null,    \"container_registry_image_prefix\": \"registry.example.com/diaspora/diaspora-project-site\",    \"_links\": {      \"self\": \"http://example.com/api/v4/projects\",      \"issues\": \"http://example.com/api/v4/projects/1/issues\",      \"merge_requests\": \"http://example.com/api/v4/projects/1/merge_requests\",      \"repo_branches\": \"http://example.com/api/v4/projects/1/repository_branches\",      \"labels\": \"http://example.com/api/v4/projects/1/labels\",      \"events\": \"http://example.com/api/v4/projects/1/events\",      \"members\": \"http://example.com/api/v4/projects/1/members\"    }  }]"
    },
    {
      "name": "Star a project",
      "description": "Stars a given project. Returns status code 304 if the project is already starred.",
      "resources": [
        {
          "method": "POST",
          "path": "/projects/:id/star"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        }
      ],
      "response": "{  \"id\": 3,  \"description\": null,  \"default_branch\": \"master\",  \"visibility\": \"internal\",  \"ssh_url_to_repo\": \"git@example.com:diaspora/diaspora-project-site.git\",  \"http_url_to_repo\": \"http://example.com/diaspora/diaspora-project-site.git\",  \"web_url\": \"http://example.com/diaspora/diaspora-project-site\",  \"readme_url\": \"http://example.com/diaspora/diaspora-project-site/blob/master/README.md\",  \"tag_list\": [ //deprecated, use `topics` instead    \"example\",    \"disapora project\"  ],  \"topics\": [    \"example\",    \"disapora project\"  ],  \"name\": \"Diaspora Project Site\",  \"name_with_namespace\": \"Diaspora / Diaspora Project Site\",  \"path\": \"diaspora-project-site\",  \"path_with_namespace\": \"diaspora/diaspora-project-site\",  \"issues_enabled\": true,  \"open_issues_count\": 1,  \"merge_requests_enabled\": true,  \"jobs_enabled\": true,  \"wiki_enabled\": true,  \"snippets_enabled\": false,  \"can_create_merge_request_in\": true,  \"resolve_outdated_diff_discussions\": false,  \"container_registry_enabled\": false, // deprecated, use container_registry_access_level instead  \"container_registry_access_level\": \"disabled\",  \"security_and_compliance_access_level\": \"disabled\",  \"created_at\": \"2013-09-30T13:46:02Z\",  \"last_activity_at\": \"2013-09-30T13:46:02Z\",  \"creator_id\": 3,  \"namespace\": {    \"id\": 3,    \"name\": \"Diaspora\",    \"path\": \"diaspora\",    \"kind\": \"group\",    \"full_path\": \"diaspora\"  },  \"import_status\": \"none\",  \"archived\": true,  \"avatar_url\": \"http://example.com/uploads/project/avatar/3/uploads/avatar.png\",  \"license_url\": \"http://example.com/diaspora/diaspora-client/blob/master/LICENSE\",  \"license\": {    \"key\": \"lgpl-3.0\",    \"name\": \"GNU Lesser General Public License v3.0\",    \"nickname\": \"GNU LGPLv3\",    \"html_url\": \"http://choosealicense.com/licenses/lgpl-3.0/\",    \"source_url\": \"http://www.gnu.org/licenses/lgpl-3.0.txt\"  },  \"shared_runners_enabled\": true,  \"forks_count\": 0,  \"star_count\": 1,  \"public_jobs\": true,  \"shared_with_groups\": [],  \"only_allow_merge_if_pipeline_succeeds\": false,  \"allow_merge_on_skipped_pipeline\": false,  \"restrict_user_defined_variables\": false,  \"only_allow_merge_if_all_discussions_are_resolved\": false,  \"remove_source_branch_after_merge\": false,  \"request_access_enabled\": false,  \"merge_method\": \"merge\",  \"squash_option\": \"default_on\",  \"autoclose_referenced_issues\": true,  \"suggestion_commit_message\": null,  \"merge_commit_template\": null,  \"container_registry_image_prefix\": \"registry.example.com/diaspora/diaspora-project-site\",  \"_links\": {    \"self\": \"http://example.com/api/v4/projects\",    \"issues\": \"http://example.com/api/v4/projects/1/issues\",    \"merge_requests\": \"http://example.com/api/v4/projects/1/merge_requests\",    \"repo_branches\": \"http://example.com/api/v4/projects/1/repository_branches\",    \"labels\": \"http://example.com/api/v4/projects/1/labels\",    \"events\": \"http://example.com/api/v4/projects/1/events\",    \"members\": \"http://example.com/api/v4/projects/1/members\"  }}"
    },
    {
      "name": "Unstar a project",
      "description": "Unstars a given project. Returns status code 304 if the project is not starred.",
      "resources": [
        {
          "method": "POST",
          "path": "/projects/:id/unstar"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        }
      ],
      "response": "{  \"id\": 3,  \"description\": null,  \"default_branch\": \"master\",  \"visibility\": \"internal\",  \"ssh_url_to_repo\": \"git@example.com:diaspora/diaspora-project-site.git\",  \"http_url_to_repo\": \"http://example.com/diaspora/diaspora-project-site.git\",  \"web_url\": \"http://example.com/diaspora/diaspora-project-site\",  \"readme_url\": \"http://example.com/diaspora/diaspora-project-site/blob/master/README.md\",  \"tag_list\": [ //deprecated, use `topics` instead    \"example\",    \"disapora project\"  ],  \"topics\": [    \"example\",    \"disapora project\"  ],  \"name\": \"Diaspora Project Site\",  \"name_with_namespace\": \"Diaspora / Diaspora Project Site\",  \"path\": \"diaspora-project-site\",  \"path_with_namespace\": \"diaspora/diaspora-project-site\",  \"issues_enabled\": true,  \"open_issues_count\": 1,  \"merge_requests_enabled\": true,  \"jobs_enabled\": true,  \"wiki_enabled\": true,  \"snippets_enabled\": false,  \"can_create_merge_request_in\": true,  \"resolve_outdated_diff_discussions\": false,  \"container_registry_enabled\": false, // deprecated, use container_registry_access_level instead  \"container_registry_access_level\": \"disabled\",  \"security_and_compliance_access_level\": \"disabled\",  \"created_at\": \"2013-09-30T13:46:02Z\",  \"last_activity_at\": \"2013-09-30T13:46:02Z\",  \"creator_id\": 3,  \"namespace\": {    \"id\": 3,    \"name\": \"Diaspora\",    \"path\": \"diaspora\",    \"kind\": \"group\",    \"full_path\": \"diaspora\"  },  \"import_status\": \"none\",  \"archived\": true,  \"avatar_url\": \"http://example.com/uploads/project/avatar/3/uploads/avatar.png\",  \"license_url\": \"http://example.com/diaspora/diaspora-client/blob/master/LICENSE\",  \"license\": {    \"key\": \"lgpl-3.0\",    \"name\": \"GNU Lesser General Public License v3.0\",    \"nickname\": \"GNU LGPLv3\",    \"html_url\": \"http://choosealicense.com/licenses/lgpl-3.0/\",    \"source_url\": \"http://www.gnu.org/licenses/lgpl-3.0.txt\"  },  \"shared_runners_enabled\": true,  \"forks_count\": 0,  \"star_count\": 0,  \"public_jobs\": true,  \"shared_with_groups\": [],  \"only_allow_merge_if_pipeline_succeeds\": false,  \"allow_merge_on_skipped_pipeline\": false,  \"restrict_user_defined_variables\": false,  \"only_allow_merge_if_all_discussions_are_resolved\": false,  \"remove_source_branch_after_merge\": false,  \"request_access_enabled\": false,  \"merge_method\": \"merge\",  \"squash_option\": \"default_on\",  \"autoclose_referenced_issues\": true,  \"suggestion_commit_message\": null,  \"merge_commit_template\": null,  \"container_registry_image_prefix\": \"registry.example.com/diaspora/diaspora-project-site\",  \"_links\": {    \"self\": \"http://example.com/api/v4/projects\",    \"issues\": \"http://example.com/api/v4/projects/1/issues\",    \"merge_requests\": \"http://example.com/api/v4/projects/1/merge_requests\",    \"repo_branches\": \"http://example.com/api/v4/projects/1/repository_branches\",    \"labels\": \"http://example.com/api/v4/projects/1/labels\",    \"events\": \"http://example.com/api/v4/projects/1/events\",    \"members\": \"http://example.com/api/v4/projects/1/members\"  }}"
    },
    {
      "name": "List starrers of a project",
      "description": "List the users who starred the specified project.",
      "resources": [
        {
          "method": "GET",
          "path": "/projects/:id/starrers"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        },
        {
          "name": "search",
          "type": "string",
          "required": false,
          "description": "Search for specific users."
        }
      ],
      "response": [
        {
          "starred_since": "2019-01-28T14:47:30.642Z",
          "user": {
            "id": 1,
            "username": "jane_smith",
            "name": "Jane Smith",
            "state": "active",
            "avatar_url": "http://localhost:3000/uploads/user/avatar/1/cd8.jpeg",
            "web_url": "http://localhost:3000/jane_smith"
          }
        },
        {
          "starred_since": "2018-01-02T11:40:26.570Z",
          "user": {
            "id": 2,
            "username": "janine_smith",
            "name": "Janine Smith",
            "state": "blocked",
            "avatar_url": "http://gravatar.com/../e32131cd8.jpeg",
            "web_url": "http://localhost:3000/janine_smith"
          }
        }
      ]
    },
    {
      "name": "Languages",
      "description": "Get languages used in a project with percentage value.",
      "resources": [
        {
          "method": "GET",
          "path": "/projects/:id/languages"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        }
      ],
      "response": {
        "Ruby": 66.69,
        "JavaScript": 22.98,
        "HTML": 7.91,
        "CoffeeScript": 2.42
      }
    },
    {
      "name": "Archive a project",
      "description": "Archives the project if the user is either an administrator or the owner of this project. This action is idempotent, thus archiving an already archived project does not change the project.",
      "resources": [
        {
          "method": "POST",
          "path": "/projects/:id/archive"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        }
      ],
      "response": "{  \"id\": 3,  \"description\": null,  \"default_branch\": \"master\",  \"visibility\": \"private\",  \"ssh_url_to_repo\": \"git@example.com:diaspora/diaspora-project-site.git\",  \"http_url_to_repo\": \"http://example.com/diaspora/diaspora-project-site.git\",  \"web_url\": \"http://example.com/diaspora/diaspora-project-site\",  \"readme_url\": \"http://example.com/diaspora/diaspora-project-site/blob/master/README.md\",  \"tag_list\": [ //deprecated, use `topics` instead    \"example\",    \"disapora project\"  ],  \"topics\": [    \"example\",    \"disapora project\"  ],  \"owner\": {    \"id\": 3,    \"name\": \"Diaspora\",    \"created_at\": \"2013-09-30T13:46:02Z\"  },  \"name\": \"Diaspora Project Site\",  \"name_with_namespace\": \"Diaspora / Diaspora Project Site\",  \"path\": \"diaspora-project-site\",  \"path_with_namespace\": \"diaspora/diaspora-project-site\",  \"issues_enabled\": true,  \"open_issues_count\": 1,  \"merge_requests_enabled\": true,  \"jobs_enabled\": true,  \"wiki_enabled\": true,  \"snippets_enabled\": false,  \"can_create_merge_request_in\": true,  \"resolve_outdated_diff_discussions\": false,  \"container_registry_enabled\": false, // deprecated, use container_registry_access_level instead  \"container_registry_access_level\": \"disabled\",  \"security_and_compliance_access_level\": \"disabled\",  \"created_at\": \"2013-09-30T13:46:02Z\",  \"last_activity_at\": \"2013-09-30T13:46:02Z\",  \"creator_id\": 3,  \"namespace\": {    \"id\": 3,    \"name\": \"Diaspora\",    \"path\": \"diaspora\",    \"kind\": \"group\",    \"full_path\": \"diaspora\"  },  \"import_status\": \"none\",  \"import_error\": null,  \"permissions\": {    \"project_access\": {      \"access_level\": 10,      \"notification_level\": 3    },    \"group_access\": {      \"access_level\": 50,      \"notification_level\": 3    }  },  \"archived\": true,  \"avatar_url\": \"http://example.com/uploads/project/avatar/3/uploads/avatar.png\",  \"license_url\": \"http://example.com/diaspora/diaspora-client/blob/master/LICENSE\",  \"license\": {    \"key\": \"lgpl-3.0\",    \"name\": \"GNU Lesser General Public License v3.0\",    \"nickname\": \"GNU LGPLv3\",    \"html_url\": \"http://choosealicense.com/licenses/lgpl-3.0/\",    \"source_url\": \"http://www.gnu.org/licenses/lgpl-3.0.txt\"  },  \"shared_runners_enabled\": true,  \"forks_count\": 0,  \"star_count\": 0,  \"runners_token\": \"b8bc4a7a29eb76ea83cf79e4908c2b\",  \"ci_default_git_depth\": 50,  \"ci_forward_deployment_enabled\": true,  \"public_jobs\": true,  \"shared_with_groups\": [],  \"only_allow_merge_if_pipeline_succeeds\": false,  \"allow_merge_on_skipped_pipeline\": false,  \"restrict_user_defined_variables\": false,  \"only_allow_merge_if_all_discussions_are_resolved\": false,  \"remove_source_branch_after_merge\": false,  \"request_access_enabled\": false,  \"merge_method\": \"merge\",  \"squash_option\": \"default_on\",  \"autoclose_referenced_issues\": true,  \"suggestion_commit_message\": null,  \"merge_commit_template\": null,  \"container_registry_image_prefix\": \"registry.example.com/diaspora/diaspora-project-site\",  \"_links\": {    \"self\": \"http://example.com/api/v4/projects\",    \"issues\": \"http://example.com/api/v4/projects/1/issues\",    \"merge_requests\": \"http://example.com/api/v4/projects/1/merge_requests\",    \"repo_branches\": \"http://example.com/api/v4/projects/1/repository_branches\",    \"labels\": \"http://example.com/api/v4/projects/1/labels\",    \"events\": \"http://example.com/api/v4/projects/1/events\",    \"members\": \"http://example.com/api/v4/projects/1/members\"  }}"
    },
    {
      "name": "Unarchive a project",
      "description": "Unarchives the project if the user is either an administrator or the owner of this project. This action is idempotent, thus unarchiving a non-archived project doesnâ€™t change the project.",
      "resources": [
        {
          "method": "POST",
          "path": "/projects/:id/unarchive"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        }
      ],
      "response": "{  \"id\": 3,  \"description\": null,  \"default_branch\": \"master\",  \"visibility\": \"private\",  \"ssh_url_to_repo\": \"git@example.com:diaspora/diaspora-project-site.git\",  \"http_url_to_repo\": \"http://example.com/diaspora/diaspora-project-site.git\",  \"web_url\": \"http://example.com/diaspora/diaspora-project-site\",  \"readme_url\": \"http://example.com/diaspora/diaspora-project-site/blob/master/README.md\",  \"tag_list\": [ //deprecated, use `topics` instead    \"example\",    \"disapora project\"  ],  \"topics\": [    \"example\",    \"disapora project\"  ],  \"owner\": {    \"id\": 3,    \"name\": \"Diaspora\",    \"created_at\": \"2013-09-30T13:46:02Z\"  },  \"name\": \"Diaspora Project Site\",  \"name_with_namespace\": \"Diaspora / Diaspora Project Site\",  \"path\": \"diaspora-project-site\",  \"path_with_namespace\": \"diaspora/diaspora-project-site\",  \"issues_enabled\": true,  \"open_issues_count\": 1,  \"merge_requests_enabled\": true,  \"jobs_enabled\": true,  \"wiki_enabled\": true,  \"snippets_enabled\": false,  \"can_create_merge_request_in\": true,  \"resolve_outdated_diff_discussions\": false,  \"container_registry_enabled\": false, // deprecated, use container_registry_access_level instead  \"container_registry_access_level\": \"disabled\",  \"security_and_compliance_access_level\": \"disabled\",  \"created_at\": \"2013-09-30T13:46:02Z\",  \"last_activity_at\": \"2013-09-30T13:46:02Z\",  \"creator_id\": 3,  \"namespace\": {    \"id\": 3,    \"name\": \"Diaspora\",    \"path\": \"diaspora\",    \"kind\": \"group\",    \"full_path\": \"diaspora\"  },  \"import_status\": \"none\",  \"import_error\": null,  \"permissions\": {    \"project_access\": {      \"access_level\": 10,      \"notification_level\": 3    },    \"group_access\": {      \"access_level\": 50,      \"notification_level\": 3    }  },  \"archived\": false,  \"avatar_url\": \"http://example.com/uploads/project/avatar/3/uploads/avatar.png\",  \"license_url\": \"http://example.com/diaspora/diaspora-client/blob/master/LICENSE\",  \"license\": {    \"key\": \"lgpl-3.0\",    \"name\": \"GNU Lesser General Public License v3.0\",    \"nickname\": \"GNU LGPLv3\",    \"html_url\": \"http://choosealicense.com/licenses/lgpl-3.0/\",    \"source_url\": \"http://www.gnu.org/licenses/lgpl-3.0.txt\"  },  \"shared_runners_enabled\": true,  \"forks_count\": 0,  \"star_count\": 0,  \"runners_token\": \"b8bc4a7a29eb76ea83cf79e4908c2b\",  \"ci_default_git_depth\": 50,  \"ci_forward_deployment_enabled\": true,  \"public_jobs\": true,  \"shared_with_groups\": [],  \"only_allow_merge_if_pipeline_succeeds\": false,  \"allow_merge_on_skipped_pipeline\": false,  \"restrict_user_defined_variables\": false,  \"only_allow_merge_if_all_discussions_are_resolved\": false,  \"remove_source_branch_after_merge\": false,  \"request_access_enabled\": false,  \"merge_method\": \"merge\",  \"squash_option\": \"default_on\",  \"autoclose_referenced_issues\": true,  \"suggestion_commit_message\": null,  \"merge_commit_template\": null,  \"container_registry_image_prefix\": \"registry.example.com/diaspora/diaspora-project-site\",  \"_links\": {    \"self\": \"http://example.com/api/v4/projects\",    \"issues\": \"http://example.com/api/v4/projects/1/issues\",    \"merge_requests\": \"http://example.com/api/v4/projects/1/merge_requests\",    \"repo_branches\": \"http://example.com/api/v4/projects/1/repository_branches\",    \"labels\": \"http://example.com/api/v4/projects/1/labels\",    \"events\": \"http://example.com/api/v4/projects/1/events\",    \"members\": \"http://example.com/api/v4/projects/1/members\"  }}"
    },
    {
      "name": "Delete project",
      "description": "This endpoint:",
      "resources": [
        {
          "method": "DELETE",
          "path": "/projects/:id"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        }
      ],
      "response": {}
    },
    {
      "name": "Restore project marked for deletion",
      "description": "Restores project marked for deletion.",
      "resources": [
        {
          "method": "POST",
          "path": "/projects/:id/restore"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        }
      ],
      "response": {}
    },
    {
      "name": "Upload a file",
      "description": "The returned url is relative to the project path. The returned full_path is the absolute path to the file. In Markdown contexts, the link is expanded when the format in markdown is used.",
      "resources": [
        {
          "method": "POST",
          "path": "/projects/:id/uploads"
        }
      ],
      "attributes": [
        {
          "name": "file",
          "type": "string",
          "required": false,
          "description": "The file to be uploaded."
        },
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        }
      ],
      "response": {
        "alt": "dk",
        "url": "/uploads/66dbcd21ec5d24ed6ea225176098d52b/dk.png",
        "full_path": "/namespace1/project1/uploads/66dbcd21ec5d24ed6ea225176098d52b/dk.png",
        "markdown": "![dk](/uploads/66dbcd21ec5d24ed6ea225176098d52b/dk.png)"
      }
    },
    {
      "name": "Max attachment size enforcement",
      "description": "In installations from source:",
      "resources": [],
      "attributes": [],
      "response": {}
    },
    {
      "name": "Upload a project avatar",
      "description": "Returned object:",
      "resources": [
        {
          "method": "PUT",
          "path": "/projects/:id"
        }
      ],
      "attributes": [
        {
          "name": "avatar",
          "type": "string",
          "required": false,
          "description": "The file to be uploaded."
        },
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        }
      ],
      "response": {
        "avatar_url": "https://gitlab.example.com/uploads/-/system/project/avatar/2/dk.png"
      }
    },
    {
      "name": "Share project with group",
      "description": "Allow to share project with group.",
      "resources": [
        {
          "method": "POST",
          "path": "/projects/:id/share"
        }
      ],
      "attributes": [
        {
          "name": "group_access",
          "type": "integer",
          "required": false,
          "description": "The access level to grant the group."
        },
        {
          "name": "group_id",
          "type": "integer",
          "required": false,
          "description": "The ID of the group to share with."
        },
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        },
        {
          "name": "expires_at",
          "type": "string",
          "required": false,
          "description": "Share expiration date in ISO 8601 format: 2016-09-26"
        }
      ],
      "response": {}
    },
    {
      "name": "Delete a shared project link within a group",
      "description": "Unshare the project from the group. Returns 204 and no content on success.",
      "resources": [
        {
          "method": "DELETE",
          "path": "/projects/:id/share/:group_id"
        }
      ],
      "attributes": [
        {
          "name": "group_id",
          "type": "integer",
          "required": false,
          "description": "The ID of the group."
        },
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        }
      ],
      "response": {}
    },
    {
      "name": "Import project members",
      "description": "Returns:",
      "resources": [
        {
          "method": "POST",
          "path": "/projects/:id/import_project_members/:project_id"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the target project to receive the members."
        },
        {
          "name": "project_id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the source project to import the members from."
        }
      ],
      "response": {}
    },
    {
      "name": "Hooks",
      "description": "Also called Project Hooks and Webhooks. These are different for System Hooks that are system-wide.",
      "resources": [],
      "attributes": [],
      "response": {}
    },
    {
      "name": "List project hooks",
      "description": "Get a list of project hooks.",
      "resources": [
        {
          "method": "GET",
          "path": "/projects/:id/hooks"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        }
      ],
      "response": {}
    },
    {
      "name": "Get project hook",
      "description": "Get a specific hook for a project.",
      "resources": [
        {
          "method": "GET",
          "path": "/projects/:id/hooks/:hook_id"
        }
      ],
      "attributes": [
        {
          "name": "hook_id",
          "type": "integer",
          "required": false,
          "description": "The ID of a project hook."
        },
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        }
      ],
      "response": {
        "id": 1,
        "url": "http://example.com/hook",
        "project_id": 3,
        "push_events": true,
        "push_events_branch_filter": "",
        "issues_events": true,
        "confidential_issues_events": true,
        "merge_requests_events": true,
        "tag_push_events": true,
        "note_events": true,
        "confidential_note_events": true,
        "job_events": true,
        "pipeline_events": true,
        "wiki_page_events": true,
        "deployment_events": true,
        "releases_events": true,
        "enable_ssl_verification": true,
        "created_at": "2012-10-12T17:04:47Z"
      }
    },
    {
      "name": "Add project hook",
      "description": "Adds a hook to a specified project.",
      "resources": [
        {
          "method": "POST",
          "path": "/projects/:id/hooks"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        },
        {
          "name": "url",
          "type": "string",
          "required": false,
          "description": "The hook URL."
        },
        {
          "name": "confidential_issues_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on confidential issues events."
        },
        {
          "name": "confidential_note_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on confidential note events."
        },
        {
          "name": "deployment_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on deployment events."
        },
        {
          "name": "enable_ssl_verification",
          "type": "boolean",
          "required": false,
          "description": "Do SSL verification when triggering the hook."
        },
        {
          "name": "issues_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on issues events."
        },
        {
          "name": "job_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on job events."
        },
        {
          "name": "merge_requests_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on merge requests events."
        },
        {
          "name": "note_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on note events."
        },
        {
          "name": "pipeline_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on pipeline events."
        },
        {
          "name": "push_events_branch_filter",
          "type": "string",
          "required": false,
          "description": "Trigger hook on push events for matching branches only."
        },
        {
          "name": "push_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on push events."
        },
        {
          "name": "releases_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on release events."
        },
        {
          "name": "tag_push_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on tag push events."
        },
        {
          "name": "token",
          "type": "string",
          "required": false,
          "description": "Secret token to validate received payloads; this isnâ€™t returned in the response."
        },
        {
          "name": "wiki_page_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on wiki events."
        }
      ],
      "response": {}
    },
    {
      "name": "Edit project hook",
      "description": "Edits a hook for a specified project.",
      "resources": [
        {
          "method": "PUT",
          "path": "/projects/:id/hooks/:hook_id"
        }
      ],
      "attributes": [
        {
          "name": "hook_id",
          "type": "integer",
          "required": false,
          "description": "The ID of the project hook."
        },
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        },
        {
          "name": "url",
          "type": "string",
          "required": false,
          "description": "The hook URL."
        },
        {
          "name": "confidential_issues_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on confidential issues events."
        },
        {
          "name": "confidential_note_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on confidential note events."
        },
        {
          "name": "deployment_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on deployment events."
        },
        {
          "name": "enable_ssl_verification",
          "type": "boolean",
          "required": false,
          "description": "Do SSL verification when triggering the hook."
        },
        {
          "name": "issues_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on issues events."
        },
        {
          "name": "job_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on job events."
        },
        {
          "name": "merge_requests_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on merge requests events."
        },
        {
          "name": "note_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on note events."
        },
        {
          "name": "pipeline_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on pipeline events."
        },
        {
          "name": "push_events_branch_filter",
          "type": "string",
          "required": false,
          "description": "Trigger hook on push events for matching branches only."
        },
        {
          "name": "push_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on push events."
        },
        {
          "name": "releases_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on release events."
        },
        {
          "name": "tag_push_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on tag push events."
        },
        {
          "name": "token",
          "type": "string",
          "required": false,
          "description": "Secret token to validate received payloads; this isnâ€™t returned in the response."
        },
        {
          "name": "wiki_page_events",
          "type": "boolean",
          "required": false,
          "description": "Trigger hook on wiki page events."
        }
      ],
      "response": {}
    },
    {
      "name": "Delete project hook",
      "description": "Note the JSON response differs if the hook is available or not. If the project hook is available before itâ€™s returned in the JSON response or an empty response is returned.",
      "resources": [
        {
          "method": "DELETE",
          "path": "/projects/:id/hooks/:hook_id"
        }
      ],
      "attributes": [
        {
          "name": "hook_id",
          "type": "integer",
          "required": false,
          "description": "The ID of the project hook."
        },
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        }
      ],
      "response": {}
    },
    {
      "name": "Fork relationship",
      "description": "Allows modification of the forked relationship between existing projects. Available only for project owners and administrators.",
      "resources": [],
      "attributes": [],
      "response": {}
    },
    {
      "name": "Create a forked from/to relation between existing projects",
      "description": "",
      "resources": [
        {
          "method": "POST",
          "path": "/projects/:id/fork/:forked_from_id"
        }
      ],
      "attributes": [
        {
          "name": "forked_from_id",
          "type": "ID",
          "required": false,
          "description": "The ID of the project that was forked from."
        },
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        }
      ],
      "response": {}
    },
    {
      "name": "Delete an existing forked from relationship",
      "description": "",
      "resources": [
        {
          "method": "DELETE",
          "path": "/projects/:id/fork"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        }
      ],
      "response": {}
    },
    {
      "name": "Search for projects by name",
      "description": "Search for projects by name which are accessible to the authenticated user. This endpoint can be accessed without authentication if the project is publicly accessible.",
      "resources": [
        {
          "method": "GET",
          "path": "/projects"
        }
      ],
      "attributes": [
        {
          "name": "search",
          "type": "string",
          "required": false,
          "description": "A string contained in the project name."
        },
        {
          "name": "order_by",
          "type": "string",
          "required": false,
          "description": "Return requests ordered by id, name, created_at or last_activity_at fields."
        },
        {
          "name": "sort",
          "type": "string",
          "required": false,
          "description": "Return requests sorted in asc or desc order."
        }
      ],
      "response": {}
    },
    {
      "name": "Start the Housekeeping task for a project",
      "description": "",
      "resources": [
        {
          "method": "POST",
          "path": "/projects/:id/housekeeping"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        }
      ],
      "response": {}
    },
    {
      "name": "Push rules",
      "description": "",
      "resources": [],
      "attributes": [],
      "response": {}
    },
    {
      "name": "Get project push rules",
      "description": "Users of GitLab Premium or higher can also see the commit_committer_check and reject_unsigned_commits parameters:",
      "resources": [
        {
          "method": "GET",
          "path": "/projects/:id/push_rule"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project"
        }
      ],
      "response": "{  \"id\": 1,  \"project_id\": 3,  \"commit_committer_check\": false,  \"reject_unsigned_commits\": false  ...}"
    },
    {
      "name": "Add project push rule",
      "description": "Adds a push rule to a specified project.",
      "resources": [
        {
          "method": "POST",
          "path": "/projects/:id/push_rule"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        },
        {
          "name": "author_email_regex",
          "type": "string",
          "required": false,
          "description": "All commit author emails must match this, for example @my-company.com$."
        },
        {
          "name": "branch_name_regex",
          "type": "string",
          "required": false,
          "description": "All branch names must match this, for example (feature|hotfix)\\/*."
        },
        {
          "name": "commit_committer_check",
          "type": "boolean",
          "required": false,
          "description": "Users can only push commits to this repository that were committed with one of their own verified emails."
        },
        {
          "name": "commit_message_negative_regex",
          "type": "string",
          "required": false,
          "description": "No commit message is allowed to match this, for example ssh\\:\\/\\/."
        },
        {
          "name": "commit_message_regex",
          "type": "string",
          "required": false,
          "description": "All commit messages must match this, for example Fixed \\d+\\..*."
        },
        {
          "name": "deny_delete_tag",
          "type": "boolean",
          "required": false,
          "description": "Deny deleting a tag."
        },
        {
          "name": "file_name_regex",
          "type": "string",
          "required": false,
          "description": "All committed filenames must not match this, for example (jar|exe)$."
        },
        {
          "name": "max_file_size",
          "type": "integer",
          "required": false,
          "description": "Maximum file size (MB)."
        },
        {
          "name": "member_check",
          "type": "boolean",
          "required": false,
          "description": "Restrict commits by author (email) to existing GitLab users."
        },
        {
          "name": "prevent_secrets",
          "type": "boolean",
          "required": false,
          "description": "GitLab rejects any files that are likely to contain secrets."
        },
        {
          "name": "reject_unsigned_commits",
          "type": "boolean",
          "required": false,
          "description": "Reject commit when itâ€™s not signed through GPG."
        }
      ],
      "response": {}
    },
    {
      "name": "Edit project push rule",
      "description": "Edits a push rule for a specified project.",
      "resources": [
        {
          "method": "PUT",
          "path": "/projects/:id/push_rule"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        },
        {
          "name": "author_email_regex",
          "type": "string",
          "required": false,
          "description": "All commit author emails must match this, for example @my-company.com$."
        },
        {
          "name": "branch_name_regex",
          "type": "string",
          "required": false,
          "description": "All branch names must match this, for example (feature|hotfix)\\/*."
        },
        {
          "name": "commit_committer_check",
          "type": "boolean",
          "required": false,
          "description": "Users can only push commits to this repository that were committed with one of their own verified emails."
        },
        {
          "name": "commit_message_negative_regex",
          "type": "string",
          "required": false,
          "description": "No commit message is allowed to match this, for example ssh\\:\\/\\/."
        },
        {
          "name": "commit_message_regex",
          "type": "string",
          "required": false,
          "description": "All commit messages must match this, for example Fixed \\d+\\..*."
        },
        {
          "name": "deny_delete_tag",
          "type": "boolean",
          "required": false,
          "description": "Deny deleting a tag."
        },
        {
          "name": "file_name_regex",
          "type": "string",
          "required": false,
          "description": "All committed filenames must not match this, for example (jar|exe)$."
        },
        {
          "name": "max_file_size",
          "type": "integer",
          "required": false,
          "description": "Maximum file size (MB)."
        },
        {
          "name": "member_check",
          "type": "boolean",
          "required": false,
          "description": "Restrict commits by author (email) to existing GitLab users."
        },
        {
          "name": "prevent_secrets",
          "type": "boolean",
          "required": false,
          "description": "GitLab rejects any files that are likely to contain secrets."
        },
        {
          "name": "reject_unsigned_commits",
          "type": "boolean",
          "required": false,
          "description": "Reject commits when they are not GPG signed."
        }
      ],
      "response": {}
    },
    {
      "name": "Delete project push rule",
      "description": "Removes a push rule from a project. This is an idempotent method and can be called multiple times. Either the push rule is available or not.",
      "resources": [
        {
          "method": "DELETE",
          "path": "/projects/:id/push_rule"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        }
      ],
      "response": {}
    },
    {
      "name": "Transfer a project to a new namespace",
      "description": "See the Project documentation for prerequisites to transfer a project.",
      "resources": [
        {
          "method": "PUT",
          "path": "/projects/:id/transfer"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        },
        {
          "name": "namespace",
          "type": "integer or string",
          "required": false,
          "description": "The ID or path of the namespace to transfer to project to."
        }
      ],
      "response": "  {  \"id\": 7,  \"description\": \"\",  \"name\": \"hello-world\",  \"name_with_namespace\": \"cute-cats / hello-world\",  \"path\": \"hello-world\",  \"path_with_namespace\": \"cute-cats/hello-world\",  \"created_at\": \"2020-10-15T16:25:22.415Z\",  \"default_branch\": \"master\",  \"tag_list\": [], //deprecated, use `topics` instead  \"topics\": [],  \"ssh_url_to_repo\": \"git@gitlab.example.com:cute-cats/hello-world.git\",  \"http_url_to_repo\": \"https://gitlab.example.com/cute-cats/hello-world.git\",  \"web_url\": \"https://gitlab.example.com/cute-cats/hello-world\",  \"readme_url\": \"https://gitlab.example.com/cute-cats/hello-world/-/blob/master/README.md\",  \"avatar_url\": null,  \"forks_count\": 0,  \"star_count\": 0,  \"last_activity_at\": \"2020-10-15T16:25:22.415Z\",  \"namespace\": {    \"id\": 18,    \"name\": \"cute-cats\",    \"path\": \"cute-cats\",    \"kind\": \"group\",    \"full_path\": \"cute-cats\",    \"parent_id\": null,    \"avatar_url\": null,    \"web_url\": \"https://gitlab.example.com/groups/cute-cats\"  },  \"container_registry_image_prefix\": \"registry.example.com/cute-cats/hello-world\",  \"_links\": {    \"self\": \"https://gitlab.example.com/api/v4/projects/7\",    \"issues\": \"https://gitlab.example.com/api/v4/projects/7/issues\",    \"merge_requests\": \"https://gitlab.example.com/api/v4/projects/7/merge_requests\",    \"repo_branches\": \"https://gitlab.example.com/api/v4/projects/7/repository/branches\",    \"labels\": \"https://gitlab.example.com/api/v4/projects/7/labels\",    \"events\": \"https://gitlab.example.com/api/v4/projects/7/events\",    \"members\": \"https://gitlab.example.com/api/v4/projects/7/members\"  },  \"packages_enabled\": true,  \"empty_repo\": false,  \"archived\": false,  \"visibility\": \"private\",  \"resolve_outdated_diff_discussions\": false,  \"container_registry_enabled\": true, // deprecated, use container_registry_access_level instead  \"container_registry_access_level\": \"enabled\",  \"container_expiration_policy\": {    \"cadence\": \"7d\",    \"enabled\": false,    \"keep_n\": null,    \"older_than\": null,    \"name_regex\": null,    \"name_regex_keep\": null,    \"next_run_at\": \"2020-10-22T16:25:22.746Z\"  },  \"issues_enabled\": true,  \"merge_requests_enabled\": true,  \"wiki_enabled\": true,  \"jobs_enabled\": true,  \"snippets_enabled\": true,  \"service_desk_enabled\": false,  \"service_desk_address\": null,  \"can_create_merge_request_in\": true,  \"issues_access_level\": \"enabled\",  \"repository_access_level\": \"enabled\",  \"merge_requests_access_level\": \"enabled\",  \"forking_access_level\": \"enabled\",  \"analytics_access_level\": \"enabled\",  \"wiki_access_level\": \"enabled\",  \"builds_access_level\": \"enabled\",  \"snippets_access_level\": \"enabled\",  \"pages_access_level\": \"enabled\",  \"security_and_compliance_access_level\": \"enabled\",  \"emails_disabled\": null,  \"shared_runners_enabled\": true,  \"lfs_enabled\": true,  \"creator_id\": 2,  \"import_status\": \"none\",  \"open_issues_count\": 0,  \"ci_default_git_depth\": 50,  \"public_jobs\": true,  \"build_timeout\": 3600,  \"auto_cancel_pending_pipelines\": \"enabled\",  \"build_coverage_regex\": null,  \"ci_config_path\": null,  \"shared_with_groups\": [],  \"only_allow_merge_if_pipeline_succeeds\": false,  \"allow_merge_on_skipped_pipeline\": null,  \"restrict_user_defined_variables\": false,  \"request_access_enabled\": true,  \"only_allow_merge_if_all_discussions_are_resolved\": false,  \"remove_source_branch_after_merge\": true,  \"printing_merge_request_link_enabled\": true,  \"merge_method\": \"merge\",  \"squash_option\": \"default_on\",  \"suggestion_commit_message\": null,  \"merge_commit_template\": null,  \"auto_devops_enabled\": true,  \"auto_devops_deploy_strategy\": \"continuous\",  \"autoclose_referenced_issues\": true,  \"approvals_before_merge\": 0,  \"mirror\": false,  \"compliance_frameworks\": []}"
    },
    {
      "name": "Branches",
      "description": "Read more in the Branches documentation.",
      "resources": [],
      "attributes": [],
      "response": {}
    },
    {
      "name": "Project import/export",
      "description": "Read more in the Project import/export documentation.",
      "resources": [],
      "attributes": [],
      "response": {}
    },
    {
      "name": "Project members",
      "description": "Read more in the Project members documentation.",
      "resources": [],
      "attributes": [],
      "response": {}
    },
    {
      "name": "Project vulnerabilities",
      "description": "Read more in the Project vulnerabilities documentation.",
      "resources": [],
      "attributes": [],
      "response": {}
    },
    {
      "name": "Configure pull mirroring for a project",
      "description": "Configure pull mirroring while creating a new project or updating an existing project using the API if the remote repository is publicly accessible or via username:token authentication. In case your HTTP repository is not publicly accessible, you can add the authentication information to the URL: https://username:token@gitlab.company.com/group/project.git, where token is a personal access token with the API scope enabled.",
      "resources": [],
      "attributes": [
        {
          "name": "import_url",
          "type": "string",
          "required": false,
          "description": "URL of remote repository being mirrored (with user:token if needed)."
        },
        {
          "name": "mirror",
          "type": "boolean",
          "required": false,
          "description": "Enables pull mirroring on project when set to true."
        },
        {
          "name": "mirror_trigger_builds",
          "type": "boolean",
          "required": false,
          "description": "Trigger pipelines for mirror updates when set to true."
        },
        {
          "name": "only_mirror_protected_branches",
          "type": "boolean",
          "required": false,
          "description": "Limits mirroring to only protected branches when set to true."
        }
      ],
      "response": {}
    },
    {
      "name": "Start the pull mirroring process for a Project",
      "description": "",
      "resources": [
        {
          "method": "POST",
          "path": "/projects/:id/mirror/pull"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        }
      ],
      "response": {}
    },
    {
      "name": "Project badges",
      "description": "Read more in the Project Badges documentation.",
      "resources": [],
      "attributes": [],
      "response": {}
    },
    {
      "name": "Download snapshot of a Git repository",
      "description": "If a repository is corrupted to the point where git clone doesnâ€™t work, the snapshot may allow some of the data to be retrieved.",
      "resources": [
        {
          "method": "GET",
          "path": "/projects/:id/snapshot"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "The ID or URL-encoded path of the project."
        },
        {
          "name": "wiki",
          "type": "boolean",
          "required": false,
          "description": "Whether to download the wiki, rather than project, repository."
        }
      ],
      "response": {}
    },
    {
      "name": "Get the path to repository storage",
      "description": "Get the path to repository storage for specified project. Available for administrators only.",
      "resources": [
        {
          "method": "GET",
          "path": "/projects/:id/storage"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer or string",
          "required": false,
          "description": "ID or URL-encoded path of the project."
        }
      ],
      "response": [
        {
          "project_id": 1,
          "disk_path": "@hashed/6b/86/6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b",
          "created_at": "2012-10-12T17:04:47Z",
          "repository_storage": "default"
        }
      ]
    }
  ]
}