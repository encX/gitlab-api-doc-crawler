{
  "origin": "https://docs.gitlab.com/ee/api/commits.html",
  "pageSlug": "commits",
  "pageName": "Commits",
  "apis": [
    {
      "name": "List repository commits",
      "description": "Get a list of repository commits in a project.",
      "resources": [
        {
          "method": "GET",
          "path": "/projects/:id/repository/commits"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer/string",
          "required": true,
          "description": "The ID or URL-encoded path of the project owned by the authenticated user"
        },
        {
          "name": "ref_name",
          "type": "string",
          "required": false,
          "description": "The name of a repository branch, tag or revision range, or if not given the default branch"
        },
        {
          "name": "since",
          "type": "string",
          "required": false,
          "description": "Only commits after or on this date are returned in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ"
        },
        {
          "name": "until",
          "type": "string",
          "required": false,
          "description": "Only commits before or on this date are returned in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ"
        },
        {
          "name": "path",
          "type": "string",
          "required": false,
          "description": "The file path"
        },
        {
          "name": "all",
          "type": "boolean",
          "required": false,
          "description": "Retrieve every commit from the repository"
        },
        {
          "name": "with_stats",
          "type": "boolean",
          "required": false,
          "description": "Stats about each commit are added to the response"
        },
        {
          "name": "first_parent",
          "type": "boolean",
          "required": false,
          "description": "Follow only the first parent commit upon seeing a merge commit"
        },
        {
          "name": "order",
          "type": "string",
          "required": false,
          "description": "List commits in order. Possible values: default, topo. Defaults to default, the commits are shown in reverse chronological order."
        },
        {
          "name": "trailers",
          "type": "boolean",
          "required": false,
          "description": "Parse and include Git trailers for every commit"
        }
      ],
      "response": [
        {
          "id": "ed899a2f4b50b4370feeea94676502b42383c746",
          "short_id": "ed899a2f4b5",
          "title": "Replace sanitize with escape once",
          "author_name": "Example User",
          "author_email": "user@example.com",
          "authored_date": "2021-09-20T11:50:22.001+00:00",
          "committer_name": "Administrator",
          "committer_email": "admin@example.com",
          "committed_date": "2021-09-20T11:50:22.001+00:00",
          "created_at": "2021-09-20T11:50:22.001+00:00",
          "message": "Replace sanitize with escape once",
          "parent_ids": [
            "6104942438c14ec7bd21c6cd5bd995272b3faff6"
          ],
          "web_url": "https://gitlab.example.com/thedude/gitlab-foss/-/commit/ed899a2f4b50b4370feeea94676502b42383c746"
        },
        {
          "id": "6104942438c14ec7bd21c6cd5bd995272b3faff6",
          "short_id": "6104942438c",
          "title": "Sanitize for network graph",
          "author_name": "randx",
          "author_email": "user@example.com",
          "committer_name": "ExampleName",
          "committer_email": "user@example.com",
          "created_at": "2021-09-20T09:06:12.201+00:00",
          "message": "Sanitize for network graph",
          "parent_ids": [
            "ae1d9fb46aa2b07ee9836d49862ec4e2c46fbbba"
          ],
          "web_url": "https://gitlab.example.com/thedude/gitlab-foss/-/commit/ed899a2f4b50b4370feeea94676502b42383c746"
        }
      ]
    },
    {
      "name": "Create a commit with multiple files and actions",
      "description": "Create a commit by posting a JSON payload",
      "resources": [
        {
          "method": "POST",
          "path": "/projects/:id/repository/commits"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer/string",
          "required": true,
          "description": "The ID or URL-encoded path of the project"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "Name of the branch to commit into. To create a new branch, also provide either start_branch or start_sha, and optionally start_project."
        },
        {
          "name": "commit_message",
          "type": "string",
          "required": true,
          "description": "Commit message"
        },
        {
          "name": "start_branch",
          "type": "string",
          "required": false,
          "description": "Name of the branch to start the new branch from"
        },
        {
          "name": "start_sha",
          "type": "string",
          "required": false,
          "description": "SHA of the commit to start the new branch from"
        },
        {
          "name": "start_project",
          "type": "integer/string",
          "required": false,
          "description": "The project ID or URL-encoded path of the project to start the new branch from. Defaults to the value of id."
        },
        {
          "name": "actions[]",
          "type": "array",
          "required": true,
          "description": "An array of action hashes to commit as a batch. See the next table for what attributes it can take."
        },
        {
          "name": "author_email",
          "type": "string",
          "required": false,
          "description": "Specify the commit author’s email address"
        },
        {
          "name": "author_name",
          "type": "string",
          "required": false,
          "description": "Specify the commit author’s name"
        },
        {
          "name": "stats",
          "type": "boolean",
          "required": false,
          "description": "Include commit stats. Default is true"
        },
        {
          "name": "force",
          "type": "boolean",
          "required": false,
          "description": "When true overwrites the target branch with a new commit based on the start_branch or start_sha"
        }
      ],
      "response": {
        "id": "ed899a2f4b50b4370feeea94676502b42383c746",
        "short_id": "ed899a2f4b5",
        "title": "some commit message",
        "author_name": "Example User",
        "author_email": "user@example.com",
        "committer_name": "Example User",
        "committer_email": "user@example.com",
        "created_at": "2016-09-20T09:26:24.000-07:00",
        "message": "some commit message",
        "parent_ids": [
          "ae1d9fb46aa2b07ee9836d49862ec4e2c46fbbba"
        ],
        "committed_date": "2016-09-20T09:26:24.000-07:00",
        "authored_date": "2016-09-20T09:26:24.000-07:00",
        "stats": {
          "additions": 2,
          "deletions": 2,
          "total": 4
        },
        "status": null,
        "web_url": "https://gitlab.example.com/thedude/gitlab-foss/-/commit/ed899a2f4b50b4370feeea94676502b42383c746"
      }
    },
    {
      "name": "Get a single commit",
      "description": "Get a specific commit identified by the commit hash or name of a branch or tag.",
      "resources": [
        {
          "method": "GET",
          "path": "/projects/:id/repository/commits/:sha"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer/string",
          "required": true,
          "description": "The ID or URL-encoded path of the project owned by the authenticated user"
        },
        {
          "name": "sha",
          "type": "string",
          "required": true,
          "description": "The commit hash or name of a repository branch or tag"
        },
        {
          "name": "stats",
          "type": "boolean",
          "required": false,
          "description": "Include commit stats. Default is true"
        }
      ],
      "response": {
        "id": "6104942438c14ec7bd21c6cd5bd995272b3faff6",
        "short_id": "6104942438c",
        "title": "Sanitize for network graph",
        "author_name": "randx",
        "author_email": "user@example.com",
        "committer_name": "Dmitriy",
        "committer_email": "user@example.com",
        "created_at": "2021-09-20T09:06:12.300+03:00",
        "message": "Sanitize for network graph",
        "committed_date": "2021-09-20T09:06:12.300+03:00",
        "authored_date": "2021-09-20T09:06:12.420+03:00",
        "parent_ids": [
          "ae1d9fb46aa2b07ee9836d49862ec4e2c46fbbba"
        ],
        "last_pipeline": {
          "id": 8,
          "ref": "master",
          "sha": "2dc6aa325a317eda67812f05600bdf0fcdc70ab0",
          "status": "created"
        },
        "stats": {
          "additions": 15,
          "deletions": 10,
          "total": 25
        },
        "status": "running",
        "web_url": "https://gitlab.example.com/thedude/gitlab-foss/-/commit/6104942438c14ec7bd21c6cd5bd995272b3faff6"
      }
    },
    {
      "name": "Get references a commit is pushed to",
      "description": "",
      "resources": [
        {
          "method": "GET",
          "path": "/projects/:id/repository/commits/:sha/refs"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer/string",
          "required": true,
          "description": "The ID or URL-encoded path of the project owned by the authenticated user"
        },
        {
          "name": "sha",
          "type": "string",
          "required": true,
          "description": "The commit hash"
        },
        {
          "name": "type",
          "type": "string",
          "required": false,
          "description": "The scope of commits. Possible values branch, tag, all. Default is all."
        }
      ],
      "response": [
        {
          "type": "branch",
          "name": "'test'"
        },
        {
          "type": "branch",
          "name": "add-balsamiq-file"
        },
        {
          "type": "branch",
          "name": "wip"
        },
        {
          "type": "tag",
          "name": "v1.1.0"
        }
      ]
    },
    {
      "name": "Cherry-pick a commit",
      "description": "Cherry-picks a commit to a given branch.",
      "resources": [
        {
          "method": "POST",
          "path": "/projects/:id/repository/commits/:sha/cherry_pick"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer/string",
          "required": true,
          "description": "The ID or URL-encoded path of the project owned by the authenticated user"
        },
        {
          "name": "sha",
          "type": "string",
          "required": true,
          "description": "The commit hash"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "The name of the branch"
        },
        {
          "name": "dry_run",
          "type": "boolean",
          "required": false,
          "description": "Does not commit any changes. Default is false. Introduced in GitLab 13.3"
        },
        {
          "name": "message",
          "type": "string",
          "required": false,
          "description": "A custom commit message to use for the new commit. Introduced in GitLab 14.0"
        }
      ],
      "response": {
        "dry_run": "success",
        "message": "Feature added\n\nSigned-off-by: Example User <user@example.com>\n",
        "error_code": "empty",
        "id": "8b090c1b79a14f2bd9e8a738f717824ff53aebad",
        "short_id": "8b090c1b",
        "author_name": "Example User",
        "author_email": "user@example.com",
        "authored_date": "2016-12-12T20:10:39.000+01:00",
        "created_at": "2016-12-12T20:10:39.000+01:00",
        "committer_name": "Administrator",
        "committer_email": "admin@example.com",
        "committed_date": "2016-12-12T20:10:39.000+01:00",
        "title": "Feature added",
        "parent_ids": [
          "a738f717824ff53aebad8b090c1b79a14f2bd9e8"
        ],
        "web_url": "https://gitlab.example.com/thedude/gitlab-foss/-/commit/8b090c1b79a14f2bd9e8a738f717824ff53aebad"
      }
    },
    {
      "name": "Revert a commit",
      "description": "Reverts a commit in a given branch.",
      "resources": [
        {
          "method": "POST",
          "path": "/projects/:id/repository/commits/:sha/revert"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer/string",
          "required": true,
          "description": "The ID or URL-encoded path of the project"
        },
        {
          "name": "sha",
          "type": "string",
          "required": true,
          "description": "Commit SHA to revert"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "Target branch name"
        },
        {
          "name": "dry_run",
          "type": "boolean",
          "required": false,
          "description": "Does not commit any changes. Default is false. Introduced in GitLab 13.3"
        }
      ],
      "response": {
        "dry_run": "success",
        "message": "Revert \"Feature added\"\n\nThis reverts commit a738f717824ff53aebad8b090c1b79a14f2bd9e8",
        "error_code": "conflict",
        "id": "8b090c1b79a14f2bd9e8a738f717824ff53aebad",
        "short_id": "8b090c1b",
        "title": "Revert \"Feature added\"",
        "created_at": "2018-11-08T15:55:26.000Z",
        "parent_ids": [
          "a738f717824ff53aebad8b090c1b79a14f2bd9e8"
        ],
        "author_name": "Administrator",
        "author_email": "admin@example.com",
        "authored_date": "2018-11-08T15:55:26.000Z",
        "committer_name": "Administrator",
        "committer_email": "admin@example.com",
        "committed_date": "2018-11-08T15:55:26.000Z",
        "web_url": "https://gitlab.example.com/thedude/gitlab-foss/-/commit/8b090c1b79a14f2bd9e8a738f717824ff53aebad"
      }
    },
    {
      "name": "Get the diff of a commit",
      "description": "Get the diff of a commit in a project.",
      "resources": [
        {
          "method": "GET",
          "path": "/projects/:id/repository/commits/:sha/diff"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer/string",
          "required": true,
          "description": "The ID or URL-encoded path of the project owned by the authenticated user"
        },
        {
          "name": "sha",
          "type": "string",
          "required": true,
          "description": "The commit hash or name of a repository branch or tag"
        }
      ],
      "response": [
        {
          "diff": "--- a/doc/update/5.4-to-6.0.md\n+++ b/doc/update/5.4-to-6.0.md\n@@ -71,6 +71,8 @@\n sudo -u git -H bundle exec rake migrate_keys RAILS_ENV=production\n sudo -u git -H bundle exec rake migrate_inline_notes RAILS_ENV=production\n \n+sudo -u git -H bundle exec rake gitlab:assets:compile RAILS_ENV=production\n+\n ```\n \n ### 6. Update config files",
          "new_path": "doc/update/5.4-to-6.0.md",
          "old_path": "doc/update/5.4-to-6.0.md",
          "a_mode": null,
          "b_mode": "100644",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false
        }
      ]
    },
    {
      "name": "Get the comments of a commit",
      "description": "Get the comments of a commit in a project.",
      "resources": [
        {
          "method": "GET",
          "path": "/projects/:id/repository/commits/:sha/comments"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer/string",
          "required": true,
          "description": "The ID or URL-encoded path of the project owned by the authenticated user"
        },
        {
          "name": "sha",
          "type": "string",
          "required": true,
          "description": "The commit hash or name of a repository branch or tag"
        }
      ],
      "response": [
        {
          "note": "this code is really nice",
          "author": {
            "id": 11,
            "username": "admin",
            "email": "admin@local.host",
            "name": "Administrator",
            "state": "active",
            "created_at": "2014-03-06T08:17:35.000Z"
          }
        }
      ]
    },
    {
      "name": "Post comment to commit",
      "description": "Adds a comment to a commit.",
      "resources": [
        {
          "method": "POST",
          "path": "/projects/:id/repository/commits/:sha/comments"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer/string",
          "required": true,
          "description": "The ID or URL-encoded path of the project owned by the authenticated user"
        },
        {
          "name": "sha",
          "type": "string",
          "required": true,
          "description": "The commit SHA or name of a repository branch or tag"
        },
        {
          "name": "note",
          "type": "string",
          "required": true,
          "description": "The text of the comment"
        },
        {
          "name": "path",
          "type": "string",
          "required": false,
          "description": "The file path relative to the repository"
        },
        {
          "name": "line",
          "type": "integer",
          "required": false,
          "description": "The line number where the comment should be placed"
        },
        {
          "name": "line_type",
          "type": "string",
          "required": false,
          "description": "The line type. Takes new or old as arguments"
        }
      ],
      "response": {
        "author": {
          "web_url": "https://gitlab.example.com/thedude",
          "avatar_url": "https://gitlab.example.com/uploads/user/avatar/28/The-Big-Lebowski-400-400.png",
          "username": "thedude",
          "state": "active",
          "name": "Jeff Lebowski",
          "id": 28
        },
        "created_at": "2016-01-19T09:44:55.600Z",
        "line_type": "new",
        "path": "dudeism.md",
        "line": 11,
        "note": "Nice picture man!"
      }
    },
    {
      "name": "Get the discussions of a commit",
      "description": "Get the discussions of a commit in a project.",
      "resources": [
        {
          "method": "GET",
          "path": "/projects/:id/repository/commits/:sha/discussions"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer/string",
          "required": true,
          "description": "The ID or URL-encoded path of the project owned by the authenticated user"
        },
        {
          "name": "sha",
          "type": "string",
          "required": true,
          "description": "The commit hash or name of a repository branch or tag"
        }
      ],
      "response": [
        {
          "id": "4604744a1c64de00ff62e1e8a6766919923d2b41",
          "individual_note": true,
          "notes": [
            {
              "id": 334686748,
              "type": null,
              "body": "I'm the Dude, so that's what you call me.",
              "attachment": null,
              "author": {
                "id": 28,
                "name": "Jeff Lebowski",
                "username": "thedude",
                "web_url": "https://gitlab.example.com/thedude",
                "state": "active",
                "avatar_url": "https://gitlab.example.com/uploads/user/avatar/28/The-Big-Lebowski-400-400.png"
              },
              "created_at": "2020-04-30T18:48:11.432Z",
              "updated_at": "2020-04-30T18:48:11.432Z",
              "system": false,
              "noteable_id": null,
              "noteable_type": "Commit",
              "resolvable": false,
              "confidential": null,
              "noteable_iid": null,
              "commands_changes": {}
            }
          ]
        }
      ]
    },
    {
      "name": "List the statuses of a commit",
      "description": "",
      "resources": [
        {
          "method": "GET",
          "path": "/projects/:id/repository/commits/:sha/statuses"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer/string",
          "required": true,
          "description": "The ID or URL-encoded path of the project owned by the authenticated user"
        },
        {
          "name": "sha",
          "type": "string",
          "required": true,
          "description": "The commit SHA"
        },
        {
          "name": "ref",
          "type": "string",
          "required": false,
          "description": "The name of a repository branch or tag or, if not given, the default branch"
        },
        {
          "name": "stage",
          "type": "string",
          "required": false,
          "description": "Filter by build stage, for example, test"
        },
        {
          "name": "name",
          "type": "string",
          "required": false,
          "description": "Filter by job name, for example, bundler:audit"
        },
        {
          "name": "all",
          "type": "boolean",
          "required": false,
          "description": "Return all statuses, not only the latest ones"
        }
      ],
      "response": [
        {
          "status": "pending",
          "created_at": "2016-01-19T08:40:25.934Z",
          "started_at": null,
          "name": "bundler:audit",
          "allow_failure": true,
          "author": {
            "username": "thedude",
            "state": "active",
            "web_url": "https://gitlab.example.com/thedude",
            "avatar_url": "https://gitlab.example.com/uploads/user/avatar/28/The-Big-Lebowski-400-400.png",
            "id": 28,
            "name": "Jeff Lebowski"
          },
          "description": null,
          "sha": "18f3e63d05582537db6d183d9d557be09e1f90c8",
          "target_url": "https://gitlab.example.com/thedude/gitlab-foss/builds/91",
          "finished_at": null,
          "id": 91,
          "ref": "master"
        },
        {
          "started_at": null,
          "name": "test",
          "allow_failure": false,
          "status": "pending",
          "created_at": "2016-01-19T08:40:25.832Z",
          "target_url": "https://gitlab.example.com/thedude/gitlab-foss/builds/90",
          "id": 90,
          "finished_at": null,
          "ref": "master",
          "sha": "18f3e63d05582537db6d183d9d557be09e1f90c8",
          "author": {
            "id": 28,
            "name": "Jeff Lebowski",
            "username": "thedude",
            "web_url": "https://gitlab.example.com/thedude",
            "state": "active",
            "avatar_url": "https://gitlab.example.com/uploads/user/avatar/28/The-Big-Lebowski-400-400.png"
          },
          "description": null
        }
      ]
    },
    {
      "name": "Post the build status to a commit",
      "description": "Adds or updates a build status of a commit.",
      "resources": [
        {
          "method": "POST",
          "path": "/projects/:id/statuses/:sha"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer/string",
          "required": true,
          "description": "The ID or URL-encoded path of the project owned by the authenticated user"
        },
        {
          "name": "sha",
          "type": "string",
          "required": true,
          "description": "The commit SHA"
        },
        {
          "name": "state",
          "type": "string",
          "required": true,
          "description": "The state of the status. Can be one of the following: pending, running, success, failed, canceled"
        },
        {
          "name": "ref",
          "type": "string",
          "required": false,
          "description": "The ref (branch or tag) to which the status refers"
        },
        {
          "name": "name or context",
          "type": "string",
          "required": false,
          "description": "The label to differentiate this status from the status of other systems. Default value is default"
        },
        {
          "name": "target_url",
          "type": "string",
          "required": false,
          "description": "The target URL to associate with this status"
        },
        {
          "name": "description",
          "type": "string",
          "required": false,
          "description": "The short description of the status"
        },
        {
          "name": "coverage",
          "type": "float",
          "required": false,
          "description": "The total code coverage"
        },
        {
          "name": "pipeline_id",
          "type": "integer",
          "required": false,
          "description": "The ID of the pipeline to set status. Use in case of several pipeline on same SHA."
        }
      ],
      "response": {
        "author": {
          "web_url": "https://gitlab.example.com/thedude",
          "name": "Jeff Lebowski",
          "avatar_url": "https://gitlab.example.com/uploads/user/avatar/28/The-Big-Lebowski-400-400.png",
          "username": "thedude",
          "state": "active",
          "id": 28
        },
        "name": "default",
        "sha": "18f3e63d05582537db6d183d9d557be09e1f90c8",
        "status": "success",
        "coverage": 100,
        "description": null,
        "id": 93,
        "target_url": null,
        "ref": null,
        "started_at": null,
        "created_at": "2016-01-19T09:05:50.355Z",
        "allow_failure": false,
        "finished_at": "2016-01-19T09:05:50.365Z"
      }
    },
    {
      "name": "List merge requests associated with a commit",
      "description": "Get a list of merge requests related to the specified commit.",
      "resources": [
        {
          "method": "GET",
          "path": "/projects/:id/repository/commits/:sha/merge_requests"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer/string",
          "required": true,
          "description": "The ID or URL-encoded path of the project owned by the authenticated user"
        },
        {
          "name": "sha",
          "type": "string",
          "required": true,
          "description": "The commit SHA"
        }
      ],
      "response": [
        {
          "id": 45,
          "iid": 1,
          "project_id": 35,
          "title": "Add new file",
          "description": "",
          "state": "opened",
          "created_at": "2018-03-26T17:26:30.916Z",
          "updated_at": "2018-03-26T17:26:30.916Z",
          "target_branch": "master",
          "source_branch": "test-branch",
          "upvotes": 0,
          "downvotes": 0,
          "author": {
            "web_url": "https://gitlab.example.com/thedude",
            "name": "Jeff Lebowski",
            "avatar_url": "https://gitlab.example.com/uploads/user/avatar/28/The-Big-Lebowski-400-400.png",
            "username": "thedude",
            "state": "active",
            "id": 28
          },
          "assignee": null,
          "source_project_id": 35,
          "target_project_id": 35,
          "labels": [],
          "draft": false,
          "work_in_progress": false,
          "milestone": null,
          "merge_when_pipeline_succeeds": false,
          "merge_status": "can_be_merged",
          "sha": "af5b13261899fb2c0db30abdd0af8b07cb44fdc5",
          "merge_commit_sha": null,
          "squash_commit_sha": null,
          "user_notes_count": 0,
          "discussion_locked": null,
          "should_remove_source_branch": null,
          "force_remove_source_branch": false,
          "web_url": "https://gitlab.example.com/root/test-project/merge_requests/1",
          "time_stats": {
            "time_estimate": 0,
            "total_time_spent": 0,
            "human_time_estimate": null,
            "human_total_time_spent": null
          }
        }
      ]
    },
    {
      "name": "Get GPG signature of a commit",
      "description": "Get the GPG signature from a commit, if it is signed. For unsigned commits, it results in a 404 response.",
      "resources": [
        {
          "method": "GET",
          "path": "/projects/:id/repository/commits/:sha/signature"
        }
      ],
      "attributes": [
        {
          "name": "id",
          "type": "integer/string",
          "required": true,
          "description": "The ID or URL-encoded path of the project owned by the authenticated user"
        },
        {
          "name": "sha",
          "type": "string",
          "required": true,
          "description": "The commit hash or name of a repository branch or tag"
        }
      ],
      "response": {
        "message": "404 GPG Signature Not Found",
        "signature_type": "PGP",
        "verification_status": "verified",
        "x509_certificate": {
          "id": 1,
          "subject": "CN=gitlab@example.org,OU=Example,O=World",
          "subject_key_identifier": "BC:BC:BC:BC:BC:BC:BC:BC:BC:BC:BC:BC:BC:BC:BC:BC:BC:BC:BC:BC",
          "email": "gitlab@example.org",
          "serial_number": 2.7896956101890133e+38,
          "certificate_status": "good",
          "x509_issuer": {
            "id": 1,
            "subject": "CN=PKI,OU=Example,O=World",
            "subject_key_identifier": "AB:AB:AB:AB:AB:AB:AB:AB:AB:AB:AB:AB:AB:AB:AB:AB:AB:AB:AB:AB",
            "crl_url": "http://example.com/pki.crl"
          }
        },
        "commit_source": "gitaly",
        "gpg_key_id": 1,
        "gpg_key_primary_keyid": "8254AAB3FBD54AC9",
        "gpg_key_user_name": "John Doe",
        "gpg_key_user_email": "johndoe@example.com",
        "gpg_key_subkey_id": null
      }
    }
  ]
}